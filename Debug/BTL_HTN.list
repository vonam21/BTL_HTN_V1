
BTL_HTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003070  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800317c  0800317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031f8  080031f8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080031f8  080031f8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031f8  080031f8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031f8  080031f8  000131f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031fc  080031fc  000131fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000068  08003264  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08003264  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008213  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001713  00000000  00000000  000282e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a0  00000000  00000000  000299f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000076c  00000000  00000000  0002a398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000173b2  00000000  00000000  0002ab04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a40c  00000000  00000000  00041eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087eec  00000000  00000000  0004c2c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c98  00000000  00000000  000d41b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d6e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003164 	.word	0x08003164

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003164 	.word	0x08003164

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 ffba 	bl	80010c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f83c 	bl	80001d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f91a 	bl	8000390 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f87e 	bl	800025c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000160:	f000 f8c8 	bl	80002f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Stop_IT(&htim2);
 8000164:	4812      	ldr	r0, [pc, #72]	; (80001b0 <main+0x64>)
 8000166:	f001 ffc1 	bl	80020ec <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Stop_IT(&htim3);
 800016a:	4812      	ldr	r0, [pc, #72]	; (80001b4 <main+0x68>)
 800016c:	f001 ffbe 	bl	80020ec <HAL_TIM_Base_Stop_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		doc_dht11();
 8000170:	f000 fda2 	bl	8000cb8 <doc_dht11>
		HAL_Delay(10);
 8000174:	200a      	movs	r0, #10
 8000176:	f001 f809 	bl	800118c <HAL_Delay>
		xu_ly_tick_dht11(tick,data_dht11);
 800017a:	490f      	ldr	r1, [pc, #60]	; (80001b8 <main+0x6c>)
 800017c:	480f      	ldr	r0, [pc, #60]	; (80001bc <main+0x70>)
 800017e:	f000 fdf9 	bl	8000d74 <xu_ly_tick_dht11>

		sprintf(nhiet_do,"Nhiet do: %d.%doC", data_dht11[2], data_dht11[3]);
 8000182:	4b0d      	ldr	r3, [pc, #52]	; (80001b8 <main+0x6c>)
 8000184:	789b      	ldrb	r3, [r3, #2]
 8000186:	461a      	mov	r2, r3
 8000188:	4b0b      	ldr	r3, [pc, #44]	; (80001b8 <main+0x6c>)
 800018a:	78db      	ldrb	r3, [r3, #3]
 800018c:	490c      	ldr	r1, [pc, #48]	; (80001c0 <main+0x74>)
 800018e:	480d      	ldr	r0, [pc, #52]	; (80001c4 <main+0x78>)
 8000190:	f002 fb36 	bl	8002800 <siprintf>
		sprintf(do_am, "Do am:  %d.%d ", data_dht11[0],data_dht11[1]);
 8000194:	4b08      	ldr	r3, [pc, #32]	; (80001b8 <main+0x6c>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	461a      	mov	r2, r3
 800019a:	4b07      	ldr	r3, [pc, #28]	; (80001b8 <main+0x6c>)
 800019c:	785b      	ldrb	r3, [r3, #1]
 800019e:	490a      	ldr	r1, [pc, #40]	; (80001c8 <main+0x7c>)
 80001a0:	480a      	ldr	r0, [pc, #40]	; (80001cc <main+0x80>)
 80001a2:	f002 fb2d 	bl	8002800 <siprintf>
		HAL_Delay(5000);
 80001a6:	f241 3088 	movw	r0, #5000	; 0x1388
 80001aa:	f000 ffef 	bl	800118c <HAL_Delay>
  {
 80001ae:	e7df      	b.n	8000170 <main+0x24>
 80001b0:	20000084 	.word	0x20000084
 80001b4:	200000cc 	.word	0x200000cc
 80001b8:	20000178 	.word	0x20000178
 80001bc:	20000114 	.word	0x20000114
 80001c0:	0800317c 	.word	0x0800317c
 80001c4:	200001e0 	.word	0x200001e0
 80001c8:	08003190 	.word	0x08003190
 80001cc:	200001f4 	.word	0x200001f4

080001d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b090      	sub	sp, #64	; 0x40
 80001d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d6:	f107 0318 	add.w	r3, r7, #24
 80001da:	2228      	movs	r2, #40	; 0x28
 80001dc:	2100      	movs	r1, #0
 80001de:	4618      	mov	r0, r3
 80001e0:	f002 fb2e 	bl	8002840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	605a      	str	r2, [r3, #4]
 80001ec:	609a      	str	r2, [r3, #8]
 80001ee:	60da      	str	r2, [r3, #12]
 80001f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f2:	2301      	movs	r3, #1
 80001f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000200:	2301      	movs	r3, #1
 8000202:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000204:	2302      	movs	r3, #2
 8000206:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800020c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800020e:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000212:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000214:	f107 0318 	add.w	r3, r7, #24
 8000218:	4618      	mov	r0, r3
 800021a:	f001 fae7 	bl	80017ec <HAL_RCC_OscConfig>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000224:	f000 fe28 	bl	8000e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000228:	230f      	movs	r3, #15
 800022a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800022c:	2302      	movs	r3, #2
 800022e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2102      	movs	r1, #2
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fd54 	bl	8001cf0 <HAL_RCC_ClockConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800024e:	f000 fe13 	bl	8000e78 <Error_Handler>
  }
}
 8000252:	bf00      	nop
 8000254:	3740      	adds	r7, #64	; 0x40
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b086      	sub	sp, #24
 8000260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000262:	f107 0308 	add.w	r3, r7, #8
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000270:	463b      	mov	r3, r7
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000278:	4b1d      	ldr	r3, [pc, #116]	; (80002f0 <MX_TIM2_Init+0x94>)
 800027a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800027e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000280:	4b1b      	ldr	r3, [pc, #108]	; (80002f0 <MX_TIM2_Init+0x94>)
 8000282:	223f      	movs	r2, #63	; 0x3f
 8000284:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000286:	4b1a      	ldr	r3, [pc, #104]	; (80002f0 <MX_TIM2_Init+0x94>)
 8000288:	2200      	movs	r2, #0
 800028a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800028c:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <MX_TIM2_Init+0x94>)
 800028e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000292:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000294:	4b16      	ldr	r3, [pc, #88]	; (80002f0 <MX_TIM2_Init+0x94>)
 8000296:	2200      	movs	r2, #0
 8000298:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <MX_TIM2_Init+0x94>)
 800029c:	2280      	movs	r2, #128	; 0x80
 800029e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002a0:	4813      	ldr	r0, [pc, #76]	; (80002f0 <MX_TIM2_Init+0x94>)
 80002a2:	f001 fe81 	bl	8001fa8 <HAL_TIM_Base_Init>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002ac:	f000 fde4 	bl	8000e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002b6:	f107 0308 	add.w	r3, r7, #8
 80002ba:	4619      	mov	r1, r3
 80002bc:	480c      	ldr	r0, [pc, #48]	; (80002f0 <MX_TIM2_Init+0x94>)
 80002be:	f002 f84b 	bl	8002358 <HAL_TIM_ConfigClockSource>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002c8:	f000 fdd6 	bl	8000e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002cc:	2300      	movs	r3, #0
 80002ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002d0:	2300      	movs	r3, #0
 80002d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002d4:	463b      	mov	r3, r7
 80002d6:	4619      	mov	r1, r3
 80002d8:	4805      	ldr	r0, [pc, #20]	; (80002f0 <MX_TIM2_Init+0x94>)
 80002da:	f002 fa21 	bl	8002720 <HAL_TIMEx_MasterConfigSynchronization>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002e4:	f000 fdc8 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002e8:	bf00      	nop
 80002ea:	3718      	adds	r7, #24
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000084 	.word	0x20000084

080002f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b086      	sub	sp, #24
 80002f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002fa:	f107 0308 	add.w	r3, r7, #8
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000308:	463b      	mov	r3, r7
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000310:	4b1d      	ldr	r3, [pc, #116]	; (8000388 <MX_TIM3_Init+0x94>)
 8000312:	4a1e      	ldr	r2, [pc, #120]	; (800038c <MX_TIM3_Init+0x98>)
 8000314:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000316:	4b1c      	ldr	r3, [pc, #112]	; (8000388 <MX_TIM3_Init+0x94>)
 8000318:	223f      	movs	r2, #63	; 0x3f
 800031a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800031c:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <MX_TIM3_Init+0x94>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000322:	4b19      	ldr	r3, [pc, #100]	; (8000388 <MX_TIM3_Init+0x94>)
 8000324:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000328:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <MX_TIM3_Init+0x94>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000330:	4b15      	ldr	r3, [pc, #84]	; (8000388 <MX_TIM3_Init+0x94>)
 8000332:	2280      	movs	r2, #128	; 0x80
 8000334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000336:	4814      	ldr	r0, [pc, #80]	; (8000388 <MX_TIM3_Init+0x94>)
 8000338:	f001 fe36 	bl	8001fa8 <HAL_TIM_Base_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000342:	f000 fd99 	bl	8000e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800034a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800034c:	f107 0308 	add.w	r3, r7, #8
 8000350:	4619      	mov	r1, r3
 8000352:	480d      	ldr	r0, [pc, #52]	; (8000388 <MX_TIM3_Init+0x94>)
 8000354:	f002 f800 	bl	8002358 <HAL_TIM_ConfigClockSource>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800035e:	f000 fd8b 	bl	8000e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000362:	2300      	movs	r3, #0
 8000364:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000366:	2300      	movs	r3, #0
 8000368:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800036a:	463b      	mov	r3, r7
 800036c:	4619      	mov	r1, r3
 800036e:	4806      	ldr	r0, [pc, #24]	; (8000388 <MX_TIM3_Init+0x94>)
 8000370:	f002 f9d6 	bl	8002720 <HAL_TIMEx_MasterConfigSynchronization>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800037a:	f000 fd7d 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800037e:	bf00      	nop
 8000380:	3718      	adds	r7, #24
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	200000cc 	.word	0x200000cc
 800038c:	40000400 	.word	0x40000400

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a4:	4b38      	ldr	r3, [pc, #224]	; (8000488 <MX_GPIO_Init+0xf8>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a37      	ldr	r2, [pc, #220]	; (8000488 <MX_GPIO_Init+0xf8>)
 80003aa:	f043 0320 	orr.w	r3, r3, #32
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b35      	ldr	r3, [pc, #212]	; (8000488 <MX_GPIO_Init+0xf8>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0320 	and.w	r3, r3, #32
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003bc:	4b32      	ldr	r3, [pc, #200]	; (8000488 <MX_GPIO_Init+0xf8>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a31      	ldr	r2, [pc, #196]	; (8000488 <MX_GPIO_Init+0xf8>)
 80003c2:	f043 0304 	orr.w	r3, r3, #4
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b2f      	ldr	r3, [pc, #188]	; (8000488 <MX_GPIO_Init+0xf8>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0304 	and.w	r3, r3, #4
 80003d0:	60bb      	str	r3, [r7, #8]
 80003d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d4:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <MX_GPIO_Init+0xf8>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a2b      	ldr	r2, [pc, #172]	; (8000488 <MX_GPIO_Init+0xf8>)
 80003da:	f043 0308 	orr.w	r3, r3, #8
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b29      	ldr	r3, [pc, #164]	; (8000488 <MX_GPIO_Init+0xf8>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0308 	and.w	r3, r3, #8
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	f240 7101 	movw	r1, #1793	; 0x701
 80003f2:	4826      	ldr	r0, [pc, #152]	; (800048c <MX_GPIO_Init+0xfc>)
 80003f4:	f001 f9c9 	bl	800178a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80003f8:	233e      	movs	r3, #62	; 0x3e
 80003fa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80003fc:	4b24      	ldr	r3, [pc, #144]	; (8000490 <MX_GPIO_Init+0x100>)
 80003fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000400:	2301      	movs	r3, #1
 8000402:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000404:	f107 0310 	add.w	r3, r7, #16
 8000408:	4619      	mov	r1, r3
 800040a:	4822      	ldr	r0, [pc, #136]	; (8000494 <MX_GPIO_Init+0x104>)
 800040c:	f001 f822 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9;
 8000410:	f240 7301 	movw	r3, #1793	; 0x701
 8000414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000416:	2301      	movs	r3, #1
 8000418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800041a:	2302      	movs	r3, #2
 800041c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041e:	2302      	movs	r3, #2
 8000420:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000422:	f107 0310 	add.w	r3, r7, #16
 8000426:	4619      	mov	r1, r3
 8000428:	4818      	ldr	r0, [pc, #96]	; (800048c <MX_GPIO_Init+0xfc>)
 800042a:	f001 f813 	bl	8001454 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 4, 0);
 800042e:	2200      	movs	r2, #0
 8000430:	2104      	movs	r1, #4
 8000432:	2007      	movs	r0, #7
 8000434:	f000 ffc9 	bl	80013ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000438:	2007      	movs	r0, #7
 800043a:	f000 ffe2 	bl	8001402 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 11, 0);
 800043e:	2200      	movs	r2, #0
 8000440:	210b      	movs	r1, #11
 8000442:	2008      	movs	r0, #8
 8000444:	f000 ffc1 	bl	80013ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000448:	2008      	movs	r0, #8
 800044a:	f000 ffda 	bl	8001402 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 11, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	210b      	movs	r1, #11
 8000452:	2009      	movs	r0, #9
 8000454:	f000 ffb9 	bl	80013ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000458:	2009      	movs	r0, #9
 800045a:	f000 ffd2 	bl	8001402 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 11, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	210b      	movs	r1, #11
 8000462:	200a      	movs	r0, #10
 8000464:	f000 ffb1 	bl	80013ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000468:	200a      	movs	r0, #10
 800046a:	f000 ffca 	bl	8001402 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 11, 0);
 800046e:	2200      	movs	r2, #0
 8000470:	210b      	movs	r1, #11
 8000472:	2017      	movs	r0, #23
 8000474:	f000 ffa9 	bl	80013ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000478:	2017      	movs	r0, #23
 800047a:	f000 ffc2 	bl	8001402 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800047e:	bf00      	nop
 8000480:	3720      	adds	r7, #32
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000
 800048c:	40010c00 	.word	0x40010c00
 8000490:	10310000 	.word	0x10310000
 8000494:	40010800 	.word	0x40010800

08000498 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 80004a2:	88fb      	ldrh	r3, [r7, #6]
 80004a4:	2b04      	cmp	r3, #4
 80004a6:	f040 80d9 	bne.w	800065c <HAL_GPIO_EXTI_Callback+0x1c4>
	{
		currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 80004aa:	f000 fe65 	bl	8001178 <HAL_GetTick>
 80004ae:	4603      	mov	r3, r0
 80004b0:	4ab7      	ldr	r2, [pc, #732]	; (8000790 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80004b2:	6013      	str	r3, [r2, #0]
		if ((currentTime - lastDebounceTime) > debounceDelay)
 80004b4:	4bb6      	ldr	r3, [pc, #728]	; (8000790 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	4bb6      	ldr	r3, [pc, #728]	; (8000794 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	1ad2      	subs	r2, r2, r3
 80004be:	4bb6      	ldr	r3, [pc, #728]	; (8000798 <HAL_GPIO_EXTI_Callback+0x300>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	f240 80ca 	bls.w	800065c <HAL_GPIO_EXTI_Callback+0x1c4>
		{
			// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)
 80004c8:	2104      	movs	r1, #4
 80004ca:	48b4      	ldr	r0, [pc, #720]	; (800079c <HAL_GPIO_EXTI_Callback+0x304>)
 80004cc:	f001 f946 	bl	800175c <HAL_GPIO_ReadPin>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	f040 80be 	bne.w	8000654 <HAL_GPIO_EXTI_Callback+0x1bc>
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004de:	48b0      	ldr	r0, [pc, #704]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 80004e0:	f001 f953 	bl	800178a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 80004e4:	2201      	movs	r2, #1
 80004e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ea:	48ad      	ldr	r0, [pc, #692]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 80004ec:	f001 f94d 	bl	800178a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f6:	48aa      	ldr	r0, [pc, #680]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 80004f8:	f001 f947 	bl	800178a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2101      	movs	r1, #1
 8000500:	48a7      	ldr	r0, [pc, #668]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 8000502:	f001 f942 	bl	800178a <HAL_GPIO_WritePin>
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)
 8000506:	2104      	movs	r1, #4
 8000508:	48a4      	ldr	r0, [pc, #656]	; (800079c <HAL_GPIO_EXTI_Callback+0x304>)
 800050a:	f001 f927 	bl	800175c <HAL_GPIO_ReadPin>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d10b      	bne.n	800052c <HAL_GPIO_EXTI_Callback+0x94>
				{
					num1++;
 8000514:	4ba3      	ldr	r3, [pc, #652]	; (80007a4 <HAL_GPIO_EXTI_Callback+0x30c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	3301      	adds	r3, #1
 800051a:	4aa2      	ldr	r2, [pc, #648]	; (80007a4 <HAL_GPIO_EXTI_Callback+0x30c>)
 800051c:	6013      	str	r3, [r2, #0]
					flag_number=1;
 800051e:	4ba2      	ldr	r3, [pc, #648]	; (80007a8 <HAL_GPIO_EXTI_Callback+0x310>)
 8000520:	2201      	movs	r2, #1
 8000522:	601a      	str	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim3);
 8000524:	48a1      	ldr	r0, [pc, #644]	; (80007ac <HAL_GPIO_EXTI_Callback+0x314>)
 8000526:	f001 fd8f 	bl	8002048 <HAL_TIM_Base_Start_IT>
 800052a:	e07c      	b.n	8000626 <HAL_GPIO_EXTI_Callback+0x18e>
				} else {
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000532:	489b      	ldr	r0, [pc, #620]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 8000534:	f001 f929 	bl	800178a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800053e:	4898      	ldr	r0, [pc, #608]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 8000540:	f001 f923 	bl	800178a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800054a:	4895      	ldr	r0, [pc, #596]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 800054c:	f001 f91d 	bl	800178a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8000550:	2201      	movs	r2, #1
 8000552:	2101      	movs	r1, #1
 8000554:	4892      	ldr	r0, [pc, #584]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 8000556:	f001 f918 	bl	800178a <HAL_GPIO_WritePin>
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)
 800055a:	2104      	movs	r1, #4
 800055c:	488f      	ldr	r0, [pc, #572]	; (800079c <HAL_GPIO_EXTI_Callback+0x304>)
 800055e:	f001 f8fd 	bl	800175c <HAL_GPIO_ReadPin>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d10b      	bne.n	8000580 <HAL_GPIO_EXTI_Callback+0xe8>
					{
						num2++;
 8000568:	4b91      	ldr	r3, [pc, #580]	; (80007b0 <HAL_GPIO_EXTI_Callback+0x318>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	3301      	adds	r3, #1
 800056e:	4a90      	ldr	r2, [pc, #576]	; (80007b0 <HAL_GPIO_EXTI_Callback+0x318>)
 8000570:	6013      	str	r3, [r2, #0]
						flag_number=2;
 8000572:	4b8d      	ldr	r3, [pc, #564]	; (80007a8 <HAL_GPIO_EXTI_Callback+0x310>)
 8000574:	2202      	movs	r2, #2
 8000576:	601a      	str	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim3);
 8000578:	488c      	ldr	r0, [pc, #560]	; (80007ac <HAL_GPIO_EXTI_Callback+0x314>)
 800057a:	f001 fd65 	bl	8002048 <HAL_TIM_Base_Start_IT>
 800057e:	e052      	b.n	8000626 <HAL_GPIO_EXTI_Callback+0x18e>
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000586:	4886      	ldr	r0, [pc, #536]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 8000588:	f001 f8ff 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000592:	4883      	ldr	r0, [pc, #524]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 8000594:	f001 f8f9 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800059e:	4880      	ldr	r0, [pc, #512]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 80005a0:	f001 f8f3 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2101      	movs	r1, #1
 80005a8:	487d      	ldr	r0, [pc, #500]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 80005aa:	f001 f8ee 	bl	800178a <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)
 80005ae:	2104      	movs	r1, #4
 80005b0:	487a      	ldr	r0, [pc, #488]	; (800079c <HAL_GPIO_EXTI_Callback+0x304>)
 80005b2:	f001 f8d3 	bl	800175c <HAL_GPIO_ReadPin>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d10b      	bne.n	80005d4 <HAL_GPIO_EXTI_Callback+0x13c>
						{
							num3++;
 80005bc:	4b7d      	ldr	r3, [pc, #500]	; (80007b4 <HAL_GPIO_EXTI_Callback+0x31c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	3301      	adds	r3, #1
 80005c2:	4a7c      	ldr	r2, [pc, #496]	; (80007b4 <HAL_GPIO_EXTI_Callback+0x31c>)
 80005c4:	6013      	str	r3, [r2, #0]
							flag_number=3;
 80005c6:	4b78      	ldr	r3, [pc, #480]	; (80007a8 <HAL_GPIO_EXTI_Callback+0x310>)
 80005c8:	2203      	movs	r2, #3
 80005ca:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim3);
 80005cc:	4877      	ldr	r0, [pc, #476]	; (80007ac <HAL_GPIO_EXTI_Callback+0x314>)
 80005ce:	f001 fd3b 	bl	8002048 <HAL_TIM_Base_Start_IT>
 80005d2:	e028      	b.n	8000626 <HAL_GPIO_EXTI_Callback+0x18e>
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005da:	4871      	ldr	r0, [pc, #452]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 80005dc:	f001 f8d5 	bl	800178a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e6:	486e      	ldr	r0, [pc, #440]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 80005e8:	f001 f8cf 	bl	800178a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 80005ec:	2201      	movs	r2, #1
 80005ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f2:	486b      	ldr	r0, [pc, #428]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 80005f4:	f001 f8c9 	bl	800178a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2101      	movs	r1, #1
 80005fc:	4868      	ldr	r0, [pc, #416]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 80005fe:	f001 f8c4 	bl	800178a <HAL_GPIO_WritePin>
							if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)
 8000602:	2104      	movs	r1, #4
 8000604:	4865      	ldr	r0, [pc, #404]	; (800079c <HAL_GPIO_EXTI_Callback+0x304>)
 8000606:	f001 f8a9 	bl	800175c <HAL_GPIO_ReadPin>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d10a      	bne.n	8000626 <HAL_GPIO_EXTI_Callback+0x18e>
							{

									led++;
 8000610:	4b69      	ldr	r3, [pc, #420]	; (80007b8 <HAL_GPIO_EXTI_Callback+0x320>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3301      	adds	r3, #1
 8000616:	4a68      	ldr	r2, [pc, #416]	; (80007b8 <HAL_GPIO_EXTI_Callback+0x320>)
 8000618:	6013      	str	r3, [r2, #0]
									flag_number=10;
 800061a:	4b63      	ldr	r3, [pc, #396]	; (80007a8 <HAL_GPIO_EXTI_Callback+0x310>)
 800061c:	220a      	movs	r2, #10
 800061e:	601a      	str	r2, [r3, #0]
									HAL_TIM_Base_Start_IT(&htim3);
 8000620:	4862      	ldr	r0, [pc, #392]	; (80007ac <HAL_GPIO_EXTI_Callback+0x314>)
 8000622:	f001 fd11 	bl	8002048 <HAL_TIM_Base_Start_IT>
							}
						}
					}
				}

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062c:	485c      	ldr	r0, [pc, #368]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 800062e:	f001 f8ac 	bl	800178a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000638:	4859      	ldr	r0, [pc, #356]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 800063a:	f001 f8a6 	bl	800178a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000644:	4856      	ldr	r0, [pc, #344]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 8000646:	f001 f8a0 	bl	800178a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 800064a:	2200      	movs	r2, #0
 800064c:	2101      	movs	r1, #1
 800064e:	4854      	ldr	r0, [pc, #336]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 8000650:	f001 f89b 	bl	800178a <HAL_GPIO_WritePin>
			}

			lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 8000654:	4b4e      	ldr	r3, [pc, #312]	; (8000790 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a4e      	ldr	r2, [pc, #312]	; (8000794 <HAL_GPIO_EXTI_Callback+0x2fc>)
 800065a:	6013      	str	r3, [r2, #0]
		}
	}


	if(GPIO_Pin == GPIO_PIN_3)
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	2b08      	cmp	r3, #8
 8000660:	f040 80f6 	bne.w	8000850 <HAL_GPIO_EXTI_Callback+0x3b8>
		{
			currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 8000664:	f000 fd88 	bl	8001178 <HAL_GetTick>
 8000668:	4603      	mov	r3, r0
 800066a:	4a49      	ldr	r2, [pc, #292]	; (8000790 <HAL_GPIO_EXTI_Callback+0x2f8>)
 800066c:	6013      	str	r3, [r2, #0]
			if ((currentTime - lastDebounceTime) > debounceDelay)
 800066e:	4b48      	ldr	r3, [pc, #288]	; (8000790 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	4b48      	ldr	r3, [pc, #288]	; (8000794 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	1ad2      	subs	r2, r2, r3
 8000678:	4b47      	ldr	r3, [pc, #284]	; (8000798 <HAL_GPIO_EXTI_Callback+0x300>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	429a      	cmp	r2, r3
 800067e:	f240 80e7 	bls.w	8000850 <HAL_GPIO_EXTI_Callback+0x3b8>
			{
				// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)
 8000682:	2108      	movs	r1, #8
 8000684:	4845      	ldr	r0, [pc, #276]	; (800079c <HAL_GPIO_EXTI_Callback+0x304>)
 8000686:	f001 f869 	bl	800175c <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	f040 80db 	bne.w	8000848 <HAL_GPIO_EXTI_Callback+0x3b0>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000698:	4841      	ldr	r0, [pc, #260]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 800069a:	f001 f876 	bl	800178a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a4:	483e      	ldr	r0, [pc, #248]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 80006a6:	f001 f870 	bl	800178a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 80006aa:	2201      	movs	r2, #1
 80006ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b0:	483b      	ldr	r0, [pc, #236]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 80006b2:	f001 f86a 	bl	800178a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2101      	movs	r1, #1
 80006ba:	4839      	ldr	r0, [pc, #228]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 80006bc:	f001 f865 	bl	800178a <HAL_GPIO_WritePin>
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)
 80006c0:	2108      	movs	r1, #8
 80006c2:	4836      	ldr	r0, [pc, #216]	; (800079c <HAL_GPIO_EXTI_Callback+0x304>)
 80006c4:	f001 f84a 	bl	800175c <HAL_GPIO_ReadPin>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d10b      	bne.n	80006e6 <HAL_GPIO_EXTI_Callback+0x24e>
					{
						num4++;
 80006ce:	4b3b      	ldr	r3, [pc, #236]	; (80007bc <HAL_GPIO_EXTI_Callback+0x324>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	3301      	adds	r3, #1
 80006d4:	4a39      	ldr	r2, [pc, #228]	; (80007bc <HAL_GPIO_EXTI_Callback+0x324>)
 80006d6:	6013      	str	r3, [r2, #0]
						flag_number=4;
 80006d8:	4b33      	ldr	r3, [pc, #204]	; (80007a8 <HAL_GPIO_EXTI_Callback+0x310>)
 80006da:	2204      	movs	r2, #4
 80006dc:	601a      	str	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim3);
 80006de:	4833      	ldr	r0, [pc, #204]	; (80007ac <HAL_GPIO_EXTI_Callback+0x314>)
 80006e0:	f001 fcb2 	bl	8002048 <HAL_TIM_Base_Start_IT>
 80006e4:	e099      	b.n	800081a <HAL_GPIO_EXTI_Callback+0x382>
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 80006e6:	2201      	movs	r2, #1
 80006e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ec:	482c      	ldr	r0, [pc, #176]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 80006ee:	f001 f84c 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f8:	4829      	ldr	r0, [pc, #164]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 80006fa:	f001 f846 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 80006fe:	2201      	movs	r2, #1
 8000700:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000704:	4826      	ldr	r0, [pc, #152]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 8000706:	f001 f840 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 800070a:	2201      	movs	r2, #1
 800070c:	2101      	movs	r1, #1
 800070e:	4824      	ldr	r0, [pc, #144]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 8000710:	f001 f83b 	bl	800178a <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)
 8000714:	2108      	movs	r1, #8
 8000716:	4821      	ldr	r0, [pc, #132]	; (800079c <HAL_GPIO_EXTI_Callback+0x304>)
 8000718:	f001 f820 	bl	800175c <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d10b      	bne.n	800073a <HAL_GPIO_EXTI_Callback+0x2a2>
						{
							num5++;
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	3301      	adds	r3, #1
 8000728:	4a25      	ldr	r2, [pc, #148]	; (80007c0 <HAL_GPIO_EXTI_Callback+0x328>)
 800072a:	6013      	str	r3, [r2, #0]
							flag_number=5;
 800072c:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <HAL_GPIO_EXTI_Callback+0x310>)
 800072e:	2205      	movs	r2, #5
 8000730:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim3);
 8000732:	481e      	ldr	r0, [pc, #120]	; (80007ac <HAL_GPIO_EXTI_Callback+0x314>)
 8000734:	f001 fc88 	bl	8002048 <HAL_TIM_Base_Start_IT>
 8000738:	e06f      	b.n	800081a <HAL_GPIO_EXTI_Callback+0x382>
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 800073a:	2201      	movs	r2, #1
 800073c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000740:	4817      	ldr	r0, [pc, #92]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 8000742:	f001 f822 	bl	800178a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074c:	4814      	ldr	r0, [pc, #80]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 800074e:	f001 f81c 	bl	800178a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000758:	4811      	ldr	r0, [pc, #68]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 800075a:	f001 f816 	bl	800178a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 800075e:	2201      	movs	r2, #1
 8000760:	2101      	movs	r1, #1
 8000762:	480f      	ldr	r0, [pc, #60]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x308>)
 8000764:	f001 f811 	bl	800178a <HAL_GPIO_WritePin>
							if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)
 8000768:	2108      	movs	r1, #8
 800076a:	480c      	ldr	r0, [pc, #48]	; (800079c <HAL_GPIO_EXTI_Callback+0x304>)
 800076c:	f000 fff6 	bl	800175c <HAL_GPIO_ReadPin>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d128      	bne.n	80007c8 <HAL_GPIO_EXTI_Callback+0x330>
							{
								num6++;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	3301      	adds	r3, #1
 800077c:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <HAL_GPIO_EXTI_Callback+0x32c>)
 800077e:	6013      	str	r3, [r2, #0]
								flag_number=6;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <HAL_GPIO_EXTI_Callback+0x310>)
 8000782:	2206      	movs	r2, #6
 8000784:	601a      	str	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 8000786:	4809      	ldr	r0, [pc, #36]	; (80007ac <HAL_GPIO_EXTI_Callback+0x314>)
 8000788:	f001 fc5e 	bl	8002048 <HAL_TIM_Base_Start_IT>
 800078c:	e045      	b.n	800081a <HAL_GPIO_EXTI_Callback+0x382>
 800078e:	bf00      	nop
 8000790:	20000190 	.word	0x20000190
 8000794:	2000018c 	.word	0x2000018c
 8000798:	20000000 	.word	0x20000000
 800079c:	40010800 	.word	0x40010800
 80007a0:	40010c00 	.word	0x40010c00
 80007a4:	20000198 	.word	0x20000198
 80007a8:	20000194 	.word	0x20000194
 80007ac:	200000cc 	.word	0x200000cc
 80007b0:	2000019c 	.word	0x2000019c
 80007b4:	200001a0 	.word	0x200001a0
 80007b8:	200001c8 	.word	0x200001c8
 80007bc:	200001a4 	.word	0x200001a4
 80007c0:	200001a8 	.word	0x200001a8
 80007c4:	200001ac 	.word	0x200001ac
							} else {
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 80007c8:	2201      	movs	r2, #1
 80007ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ce:	48b1      	ldr	r0, [pc, #708]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 80007d0:	f000 ffdb 	bl	800178a <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007da:	48ae      	ldr	r0, [pc, #696]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 80007dc:	f000 ffd5 	bl	800178a <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007e6:	48ab      	ldr	r0, [pc, #684]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 80007e8:	f000 ffcf 	bl	800178a <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2101      	movs	r1, #1
 80007f0:	48a8      	ldr	r0, [pc, #672]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 80007f2:	f000 ffca 	bl	800178a <HAL_GPIO_WritePin>
								if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)
 80007f6:	2108      	movs	r1, #8
 80007f8:	48a7      	ldr	r0, [pc, #668]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x600>)
 80007fa:	f000 ffaf 	bl	800175c <HAL_GPIO_ReadPin>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d10a      	bne.n	800081a <HAL_GPIO_EXTI_Callback+0x382>
								{
										quat++;
 8000804:	4ba5      	ldr	r3, [pc, #660]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x604>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	4aa4      	ldr	r2, [pc, #656]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x604>)
 800080c:	6013      	str	r3, [r2, #0]
										flag_number=10;
 800080e:	4ba4      	ldr	r3, [pc, #656]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x608>)
 8000810:	220a      	movs	r2, #10
 8000812:	601a      	str	r2, [r3, #0]
										HAL_TIM_Base_Start_IT(&htim3);
 8000814:	48a3      	ldr	r0, [pc, #652]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000816:	f001 fc17 	bl	8002048 <HAL_TIM_Base_Start_IT>
								}
							}
						}
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000820:	489c      	ldr	r0, [pc, #624]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 8000822:	f000 ffb2 	bl	800178a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 7100 	mov.w	r1, #512	; 0x200
 800082c:	4899      	ldr	r0, [pc, #612]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 800082e:	f000 ffac 	bl	800178a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000838:	4896      	ldr	r0, [pc, #600]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 800083a:	f000 ffa6 	bl	800178a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 800083e:	2200      	movs	r2, #0
 8000840:	2101      	movs	r1, #1
 8000842:	4894      	ldr	r0, [pc, #592]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 8000844:	f000 ffa1 	bl	800178a <HAL_GPIO_WritePin>
				}

				lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 8000848:	4b97      	ldr	r3, [pc, #604]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x610>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a97      	ldr	r2, [pc, #604]	; (8000aac <HAL_GPIO_EXTI_Callback+0x614>)
 800084e:	6013      	str	r3, [r2, #0]
			}
		}


	if(GPIO_Pin == GPIO_PIN_4)
 8000850:	88fb      	ldrh	r3, [r7, #6]
 8000852:	2b10      	cmp	r3, #16
 8000854:	f040 80d9 	bne.w	8000a0a <HAL_GPIO_EXTI_Callback+0x572>
		{
			currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 8000858:	f000 fc8e 	bl	8001178 <HAL_GetTick>
 800085c:	4603      	mov	r3, r0
 800085e:	4a92      	ldr	r2, [pc, #584]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x610>)
 8000860:	6013      	str	r3, [r2, #0]
			if ((currentTime - lastDebounceTime) > debounceDelay)
 8000862:	4b91      	ldr	r3, [pc, #580]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x610>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4b91      	ldr	r3, [pc, #580]	; (8000aac <HAL_GPIO_EXTI_Callback+0x614>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	1ad2      	subs	r2, r2, r3
 800086c:	4b90      	ldr	r3, [pc, #576]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x618>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	429a      	cmp	r2, r3
 8000872:	f240 80ca 	bls.w	8000a0a <HAL_GPIO_EXTI_Callback+0x572>
			{
				// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8000876:	2110      	movs	r1, #16
 8000878:	4887      	ldr	r0, [pc, #540]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x600>)
 800087a:	f000 ff6f 	bl	800175c <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	f040 80be 	bne.w	8000a02 <HAL_GPIO_EXTI_Callback+0x56a>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 7180 	mov.w	r1, #256	; 0x100
 800088c:	4881      	ldr	r0, [pc, #516]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 800088e:	f000 ff7c 	bl	800178a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8000892:	2201      	movs	r2, #1
 8000894:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000898:	487e      	ldr	r0, [pc, #504]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 800089a:	f000 ff76 	bl	800178a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a4:	487b      	ldr	r0, [pc, #492]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 80008a6:	f000 ff70 	bl	800178a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 80008aa:	2201      	movs	r2, #1
 80008ac:	2101      	movs	r1, #1
 80008ae:	4879      	ldr	r0, [pc, #484]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 80008b0:	f000 ff6b 	bl	800178a <HAL_GPIO_WritePin>
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 80008b4:	2110      	movs	r1, #16
 80008b6:	4878      	ldr	r0, [pc, #480]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x600>)
 80008b8:	f000 ff50 	bl	800175c <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d10b      	bne.n	80008da <HAL_GPIO_EXTI_Callback+0x442>
					{
						num7++;
 80008c2:	4b7c      	ldr	r3, [pc, #496]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x61c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	3301      	adds	r3, #1
 80008c8:	4a7a      	ldr	r2, [pc, #488]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x61c>)
 80008ca:	6013      	str	r3, [r2, #0]
						flag_number=7;
 80008cc:	4b74      	ldr	r3, [pc, #464]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x608>)
 80008ce:	2207      	movs	r2, #7
 80008d0:	601a      	str	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim3);
 80008d2:	4874      	ldr	r0, [pc, #464]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x60c>)
 80008d4:	f001 fbb8 	bl	8002048 <HAL_TIM_Base_Start_IT>
 80008d8:	e07c      	b.n	80009d4 <HAL_GPIO_EXTI_Callback+0x53c>
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 80008da:	2201      	movs	r2, #1
 80008dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008e0:	486c      	ldr	r0, [pc, #432]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 80008e2:	f000 ff52 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ec:	4869      	ldr	r0, [pc, #420]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 80008ee:	f000 ff4c 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f8:	4866      	ldr	r0, [pc, #408]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 80008fa:	f000 ff46 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 80008fe:	2201      	movs	r2, #1
 8000900:	2101      	movs	r1, #1
 8000902:	4864      	ldr	r0, [pc, #400]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 8000904:	f000 ff41 	bl	800178a <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8000908:	2110      	movs	r1, #16
 800090a:	4863      	ldr	r0, [pc, #396]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x600>)
 800090c:	f000 ff26 	bl	800175c <HAL_GPIO_ReadPin>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d10b      	bne.n	800092e <HAL_GPIO_EXTI_Callback+0x496>
						{
							num8++;
 8000916:	4b68      	ldr	r3, [pc, #416]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x620>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	4a66      	ldr	r2, [pc, #408]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x620>)
 800091e:	6013      	str	r3, [r2, #0]
							flag_number=8;
 8000920:	4b5f      	ldr	r3, [pc, #380]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x608>)
 8000922:	2208      	movs	r2, #8
 8000924:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim3);
 8000926:	485f      	ldr	r0, [pc, #380]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000928:	f001 fb8e 	bl	8002048 <HAL_TIM_Base_Start_IT>
 800092c:	e052      	b.n	80009d4 <HAL_GPIO_EXTI_Callback+0x53c>
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000934:	4857      	ldr	r0, [pc, #348]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 8000936:	f000 ff28 	bl	800178a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000940:	4854      	ldr	r0, [pc, #336]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 8000942:	f000 ff22 	bl	800178a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800094c:	4851      	ldr	r0, [pc, #324]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 800094e:	f000 ff1c 	bl	800178a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8000952:	2201      	movs	r2, #1
 8000954:	2101      	movs	r1, #1
 8000956:	484f      	ldr	r0, [pc, #316]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 8000958:	f000 ff17 	bl	800178a <HAL_GPIO_WritePin>
							if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 800095c:	2110      	movs	r1, #16
 800095e:	484e      	ldr	r0, [pc, #312]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x600>)
 8000960:	f000 fefc 	bl	800175c <HAL_GPIO_ReadPin>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10b      	bne.n	8000982 <HAL_GPIO_EXTI_Callback+0x4ea>
							{
								num9++;
 800096a:	4b54      	ldr	r3, [pc, #336]	; (8000abc <HAL_GPIO_EXTI_Callback+0x624>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	4a52      	ldr	r2, [pc, #328]	; (8000abc <HAL_GPIO_EXTI_Callback+0x624>)
 8000972:	6013      	str	r3, [r2, #0]
								flag_number=9;
 8000974:	4b4a      	ldr	r3, [pc, #296]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x608>)
 8000976:	2209      	movs	r2, #9
 8000978:	601a      	str	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 800097a:	484a      	ldr	r0, [pc, #296]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x60c>)
 800097c:	f001 fb64 	bl	8002048 <HAL_TIM_Base_Start_IT>
 8000980:	e028      	b.n	80009d4 <HAL_GPIO_EXTI_Callback+0x53c>
							} else {
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8000982:	2201      	movs	r2, #1
 8000984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000988:	4842      	ldr	r0, [pc, #264]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 800098a:	f000 fefe 	bl	800178a <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 800098e:	2201      	movs	r2, #1
 8000990:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000994:	483f      	ldr	r0, [pc, #252]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 8000996:	f000 fef8 	bl	800178a <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 800099a:	2201      	movs	r2, #1
 800099c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a0:	483c      	ldr	r0, [pc, #240]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 80009a2:	f000 fef2 	bl	800178a <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2101      	movs	r1, #1
 80009aa:	483a      	ldr	r0, [pc, #232]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 80009ac:	f000 feed 	bl	800178a <HAL_GPIO_WritePin>
								if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 80009b0:	2110      	movs	r1, #16
 80009b2:	4839      	ldr	r0, [pc, #228]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x600>)
 80009b4:	f000 fed2 	bl	800175c <HAL_GPIO_ReadPin>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d10a      	bne.n	80009d4 <HAL_GPIO_EXTI_Callback+0x53c>
								{
										bom++;
 80009be:	4b40      	ldr	r3, [pc, #256]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x628>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	3301      	adds	r3, #1
 80009c4:	4a3e      	ldr	r2, [pc, #248]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x628>)
 80009c6:	6013      	str	r3, [r2, #0]
										flag_number=10;
 80009c8:	4b35      	ldr	r3, [pc, #212]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x608>)
 80009ca:	220a      	movs	r2, #10
 80009cc:	601a      	str	r2, [r3, #0]
										HAL_TIM_Base_Start_IT(&htim3);
 80009ce:	4835      	ldr	r0, [pc, #212]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x60c>)
 80009d0:	f001 fb3a 	bl	8002048 <HAL_TIM_Base_Start_IT>
								}
							}
						}
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009da:	482e      	ldr	r0, [pc, #184]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 80009dc:	f000 fed5 	bl	800178a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e6:	482b      	ldr	r0, [pc, #172]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 80009e8:	f000 fecf 	bl	800178a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f2:	4828      	ldr	r0, [pc, #160]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 80009f4:	f000 fec9 	bl	800178a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2101      	movs	r1, #1
 80009fc:	4825      	ldr	r0, [pc, #148]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 80009fe:	f000 fec4 	bl	800178a <HAL_GPIO_WritePin>
				}

				lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 8000a02:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x610>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a29      	ldr	r2, [pc, #164]	; (8000aac <HAL_GPIO_EXTI_Callback+0x614>)
 8000a08:	6013      	str	r3, [r2, #0]
			}
		}



	if(GPIO_Pin == GPIO_PIN_5)
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	2b20      	cmp	r3, #32
 8000a0e:	f040 80f3 	bne.w	8000bf8 <HAL_GPIO_EXTI_Callback+0x760>
		{
			currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 8000a12:	f000 fbb1 	bl	8001178 <HAL_GetTick>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4a23      	ldr	r2, [pc, #140]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x610>)
 8000a1a:	6013      	str	r3, [r2, #0]
			if ((currentTime - lastDebounceTime) > debounceDelay)
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x610>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <HAL_GPIO_EXTI_Callback+0x614>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	1ad2      	subs	r2, r2, r3
 8000a26:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x618>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	f240 80e4 	bls.w	8000bf8 <HAL_GPIO_EXTI_Callback+0x760>
			{
				// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 8000a30:	2120      	movs	r1, #32
 8000a32:	4819      	ldr	r0, [pc, #100]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x600>)
 8000a34:	f000 fe92 	bl	800175c <HAL_GPIO_ReadPin>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	f040 80d8 	bne.w	8000bf0 <HAL_GPIO_EXTI_Callback+0x758>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a46:	4813      	ldr	r0, [pc, #76]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 8000a48:	f000 fe9f 	bl	800178a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a52:	4810      	ldr	r0, [pc, #64]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 8000a54:	f000 fe99 	bl	800178a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5e:	480d      	ldr	r0, [pc, #52]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 8000a60:	f000 fe93 	bl	800178a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2101      	movs	r1, #1
 8000a68:	480a      	ldr	r0, [pc, #40]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5fc>)
 8000a6a:	f000 fe8e 	bl	800178a <HAL_GPIO_WritePin>
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 8000a6e:	2120      	movs	r1, #32
 8000a70:	4809      	ldr	r0, [pc, #36]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x600>)
 8000a72:	f000 fe73 	bl	800175c <HAL_GPIO_ReadPin>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d125      	bne.n	8000ac8 <HAL_GPIO_EXTI_Callback+0x630>
					{
							num_sao++;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x62c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x62c>)
 8000a84:	6013      	str	r3, [r2, #0]
							flag_number=10;
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x608>)
 8000a88:	220a      	movs	r2, #10
 8000a8a:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim3);
 8000a8c:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000a8e:	f001 fadb 	bl	8002048 <HAL_TIM_Base_Start_IT>
 8000a92:	e096      	b.n	8000bc2 <HAL_GPIO_EXTI_Callback+0x72a>
 8000a94:	40010c00 	.word	0x40010c00
 8000a98:	40010800 	.word	0x40010800
 8000a9c:	200001cc 	.word	0x200001cc
 8000aa0:	20000194 	.word	0x20000194
 8000aa4:	200000cc 	.word	0x200000cc
 8000aa8:	20000190 	.word	0x20000190
 8000aac:	2000018c 	.word	0x2000018c
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	200001b0 	.word	0x200001b0
 8000ab8:	200001b4 	.word	0x200001b4
 8000abc:	200001b8 	.word	0x200001b8
 8000ac0:	200001d0 	.word	0x200001d0
 8000ac4:	200001c0 	.word	0x200001c0
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ace:	486b      	ldr	r0, [pc, #428]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x7e4>)
 8000ad0:	f000 fe5b 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ada:	4868      	ldr	r0, [pc, #416]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x7e4>)
 8000adc:	f000 fe55 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae6:	4865      	ldr	r0, [pc, #404]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x7e4>)
 8000ae8:	f000 fe4f 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2101      	movs	r1, #1
 8000af0:	4862      	ldr	r0, [pc, #392]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x7e4>)
 8000af2:	f000 fe4a 	bl	800178a <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 8000af6:	2120      	movs	r1, #32
 8000af8:	4861      	ldr	r0, [pc, #388]	; (8000c80 <HAL_GPIO_EXTI_Callback+0x7e8>)
 8000afa:	f000 fe2f 	bl	800175c <HAL_GPIO_ReadPin>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d10b      	bne.n	8000b1c <HAL_GPIO_EXTI_Callback+0x684>
						{
							num0++;
 8000b04:	4b5f      	ldr	r3, [pc, #380]	; (8000c84 <HAL_GPIO_EXTI_Callback+0x7ec>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	4a5e      	ldr	r2, [pc, #376]	; (8000c84 <HAL_GPIO_EXTI_Callback+0x7ec>)
 8000b0c:	6013      	str	r3, [r2, #0]
							flag_number=0;
 8000b0e:	4b5e      	ldr	r3, [pc, #376]	; (8000c88 <HAL_GPIO_EXTI_Callback+0x7f0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim3);
 8000b14:	485d      	ldr	r0, [pc, #372]	; (8000c8c <HAL_GPIO_EXTI_Callback+0x7f4>)
 8000b16:	f001 fa97 	bl	8002048 <HAL_TIM_Base_Start_IT>
 8000b1a:	e052      	b.n	8000bc2 <HAL_GPIO_EXTI_Callback+0x72a>
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b22:	4856      	ldr	r0, [pc, #344]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x7e4>)
 8000b24:	f000 fe31 	bl	800178a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b2e:	4853      	ldr	r0, [pc, #332]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x7e4>)
 8000b30:	f000 fe2b 	bl	800178a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3a:	4850      	ldr	r0, [pc, #320]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x7e4>)
 8000b3c:	f000 fe25 	bl	800178a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2101      	movs	r1, #1
 8000b44:	484d      	ldr	r0, [pc, #308]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x7e4>)
 8000b46:	f000 fe20 	bl	800178a <HAL_GPIO_WritePin>
							if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 8000b4a:	2120      	movs	r1, #32
 8000b4c:	484c      	ldr	r0, [pc, #304]	; (8000c80 <HAL_GPIO_EXTI_Callback+0x7e8>)
 8000b4e:	f000 fe05 	bl	800175c <HAL_GPIO_ReadPin>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d10b      	bne.n	8000b70 <HAL_GPIO_EXTI_Callback+0x6d8>
							{
								num_thang++;
 8000b58:	4b4d      	ldr	r3, [pc, #308]	; (8000c90 <HAL_GPIO_EXTI_Callback+0x7f8>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	4a4c      	ldr	r2, [pc, #304]	; (8000c90 <HAL_GPIO_EXTI_Callback+0x7f8>)
 8000b60:	6013      	str	r3, [r2, #0]
								flag_number=11;
 8000b62:	4b49      	ldr	r3, [pc, #292]	; (8000c88 <HAL_GPIO_EXTI_Callback+0x7f0>)
 8000b64:	220b      	movs	r2, #11
 8000b66:	601a      	str	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 8000b68:	4848      	ldr	r0, [pc, #288]	; (8000c8c <HAL_GPIO_EXTI_Callback+0x7f4>)
 8000b6a:	f001 fa6d 	bl	8002048 <HAL_TIM_Base_Start_IT>
 8000b6e:	e028      	b.n	8000bc2 <HAL_GPIO_EXTI_Callback+0x72a>
							} else {
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8000b70:	2201      	movs	r2, #1
 8000b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b76:	4841      	ldr	r0, [pc, #260]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x7e4>)
 8000b78:	f000 fe07 	bl	800178a <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b82:	483e      	ldr	r0, [pc, #248]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x7e4>)
 8000b84:	f000 fe01 	bl	800178a <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b8e:	483b      	ldr	r0, [pc, #236]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x7e4>)
 8000b90:	f000 fdfb 	bl	800178a <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2101      	movs	r1, #1
 8000b98:	4838      	ldr	r0, [pc, #224]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x7e4>)
 8000b9a:	f000 fdf6 	bl	800178a <HAL_GPIO_WritePin>
								if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 8000b9e:	2120      	movs	r1, #32
 8000ba0:	4837      	ldr	r0, [pc, #220]	; (8000c80 <HAL_GPIO_EXTI_Callback+0x7e8>)
 8000ba2:	f000 fddb 	bl	800175c <HAL_GPIO_ReadPin>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d10a      	bne.n	8000bc2 <HAL_GPIO_EXTI_Callback+0x72a>
								{
										mode++;
 8000bac:	4b39      	ldr	r3, [pc, #228]	; (8000c94 <HAL_GPIO_EXTI_Callback+0x7fc>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	4a38      	ldr	r2, [pc, #224]	; (8000c94 <HAL_GPIO_EXTI_Callback+0x7fc>)
 8000bb4:	6013      	str	r3, [r2, #0]
										flag_number=10;
 8000bb6:	4b34      	ldr	r3, [pc, #208]	; (8000c88 <HAL_GPIO_EXTI_Callback+0x7f0>)
 8000bb8:	220a      	movs	r2, #10
 8000bba:	601a      	str	r2, [r3, #0]
										HAL_TIM_Base_Start_IT(&htim3);
 8000bbc:	4833      	ldr	r0, [pc, #204]	; (8000c8c <HAL_GPIO_EXTI_Callback+0x7f4>)
 8000bbe:	f001 fa43 	bl	8002048 <HAL_TIM_Base_Start_IT>
								}
							}
						}
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc8:	482c      	ldr	r0, [pc, #176]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x7e4>)
 8000bca:	f000 fdde 	bl	800178a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd4:	4829      	ldr	r0, [pc, #164]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x7e4>)
 8000bd6:	f000 fdd8 	bl	800178a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be0:	4826      	ldr	r0, [pc, #152]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x7e4>)
 8000be2:	f000 fdd2 	bl	800178a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2101      	movs	r1, #1
 8000bea:	4824      	ldr	r0, [pc, #144]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x7e4>)
 8000bec:	f000 fdcd 	bl	800178a <HAL_GPIO_WritePin>
				}

				lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 8000bf0:	4b29      	ldr	r3, [pc, #164]	; (8000c98 <HAL_GPIO_EXTI_Callback+0x800>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a29      	ldr	r2, [pc, #164]	; (8000c9c <HAL_GPIO_EXTI_Callback+0x804>)
 8000bf6:	6013      	str	r3, [r2, #0]
			}
		}
	if(GPIO_Pin == GPIO_PIN_1)
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d13a      	bne.n	8000c74 <HAL_GPIO_EXTI_Callback+0x7dc>
		{

				tick_hien_tai = __HAL_TIM_GET_COUNTER(&htim2);
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x808>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c04:	4a27      	ldr	r2, [pc, #156]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x80c>)
 8000c06:	6013      	str	r3, [r2, #0]
				thoi_gian_tick = tick_hien_tai - tick_lan_truoc;
 8000c08:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x80c>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x810>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	4a26      	ldr	r2, [pc, #152]	; (8000cac <HAL_GPIO_EXTI_Callback+0x814>)
 8000c14:	6013      	str	r3, [r2, #0]
				tick_lan_truoc = tick_hien_tai;
 8000c16:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x80c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a23      	ldr	r2, [pc, #140]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x810>)
 8000c1c:	6013      	str	r3, [r2, #0]
				tick[count_tick] = thoi_gian_tick;
 8000c1e:	4b23      	ldr	r3, [pc, #140]	; (8000cac <HAL_GPIO_EXTI_Callback+0x814>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x818>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	b2d1      	uxtb	r1, r2
 8000c28:	4a22      	ldr	r2, [pc, #136]	; (8000cb4 <HAL_GPIO_EXTI_Callback+0x81c>)
 8000c2a:	54d1      	strb	r1, [r2, r3]
				count_tick++;
 8000c2c:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x818>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	4a1f      	ldr	r2, [pc, #124]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x818>)
 8000c34:	6013      	str	r3, [r2, #0]
				if(count_tick >84)
 8000c36:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x818>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b54      	cmp	r3, #84	; 0x54
 8000c3c:	dd1a      	ble.n	8000c74 <HAL_GPIO_EXTI_Callback+0x7dc>
				{
					  HAL_TIM_Base_Stop_IT(&htim2);
 8000c3e:	4818      	ldr	r0, [pc, #96]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x808>)
 8000c40:	f001 fa54 	bl	80020ec <HAL_TIM_Base_Stop_IT>
					  HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000c44:	2007      	movs	r0, #7
 8000c46:	f000 fbea 	bl	800141e <HAL_NVIC_DisableIRQ>
					  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 0308 	add.w	r3, r7, #8
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
					  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
					  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP  ;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
					  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c60:	2302      	movs	r3, #2
 8000c62:	60bb      	str	r3, [r7, #8]
					  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2302      	movs	r3, #2
 8000c66:	617b      	str	r3, [r7, #20]
					  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4804      	ldr	r0, [pc, #16]	; (8000c80 <HAL_GPIO_EXTI_Callback+0x7e8>)
 8000c70:	f000 fbf0 	bl	8001454 <HAL_GPIO_Init>
				}
		}

}
 8000c74:	bf00      	nop
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40010c00 	.word	0x40010c00
 8000c80:	40010800 	.word	0x40010800
 8000c84:	200001bc 	.word	0x200001bc
 8000c88:	20000194 	.word	0x20000194
 8000c8c:	200000cc 	.word	0x200000cc
 8000c90:	200001c4 	.word	0x200001c4
 8000c94:	200001d4 	.word	0x200001d4
 8000c98:	20000190 	.word	0x20000190
 8000c9c:	2000018c 	.word	0x2000018c
 8000ca0:	20000084 	.word	0x20000084
 8000ca4:	20000180 	.word	0x20000180
 8000ca8:	2000017c 	.word	0x2000017c
 8000cac:	20000184 	.word	0x20000184
 8000cb0:	20000188 	.word	0x20000188
 8000cb4:	20000114 	.word	0x20000114

08000cb8 <doc_dht11>:
void doc_dht11(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000cbe:	4828      	ldr	r0, [pc, #160]	; (8000d60 <doc_dht11+0xa8>)
 8000cc0:	f001 f9c2 	bl	8002048 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000cc4:	2007      	movs	r0, #7
 8000cc6:	f000 fbaa 	bl	800141e <HAL_NVIC_DisableIRQ>
	count_tick =0;
 8000cca:	4b26      	ldr	r3, [pc, #152]	; (8000d64 <doc_dht11+0xac>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]

	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	463b      	mov	r3, r7
 8000cee:	4619      	mov	r1, r3
 8000cf0:	481d      	ldr	r0, [pc, #116]	; (8000d68 <doc_dht11+0xb0>)
 8000cf2:	f000 fbaf 	bl	8001454 <HAL_GPIO_Init>

	  HAL_Delay(1);
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f000 fa48 	bl	800118c <HAL_Delay>

	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP  ;
 8000d00:	2301      	movs	r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d04:	2302      	movs	r3, #2
 8000d06:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4815      	ldr	r0, [pc, #84]	; (8000d68 <doc_dht11+0xb0>)
 8000d12:	f000 fb9f 	bl	8001454 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2102      	movs	r1, #2
 8000d1a:	4813      	ldr	r0, [pc, #76]	; (8000d68 <doc_dht11+0xb0>)
 8000d1c:	f000 fd35 	bl	800178a <HAL_GPIO_WritePin>

	HAL_Delay(20);
 8000d20:	2014      	movs	r0, #20
 8000d22:	f000 fa33 	bl	800118c <HAL_Delay>
	if(count_tick ==0)
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <doc_dht11+0xac>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d106      	bne.n	8000d3c <doc_dht11+0x84>
	{
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <doc_dht11+0xa8>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2200      	movs	r2, #0
 8000d34:	625a      	str	r2, [r3, #36]	; 0x24
		tick_lan_truoc=0;
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <doc_dht11+0xb4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
	}
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <doc_dht11+0xb8>)
 8000d42:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	463b      	mov	r3, r7
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4806      	ldr	r0, [pc, #24]	; (8000d68 <doc_dht11+0xb0>)
 8000d4e:	f000 fb81 	bl	8001454 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d52:	2007      	movs	r0, #7
 8000d54:	f000 fb55 	bl	8001402 <HAL_NVIC_EnableIRQ>

}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000084 	.word	0x20000084
 8000d64:	20000188 	.word	0x20000188
 8000d68:	40010800 	.word	0x40010800
 8000d6c:	2000017c 	.word	0x2000017c
 8000d70:	10310000 	.word	0x10310000

08000d74 <xu_ly_tick_dht11>:
void xu_ly_tick_dht11(uint8_t* tick,uint8_t* data_dht11)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8000d7e:	4828      	ldr	r0, [pc, #160]	; (8000e20 <xu_ly_tick_dht11+0xac>)
 8000d80:	f001 f9b4 	bl	80020ec <HAL_TIM_Base_Stop_IT>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000d84:	2007      	movs	r0, #7
 8000d86:	f000 fb4a 	bl	800141e <HAL_NVIC_DisableIRQ>
	int count_data_dht11=0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
	for(int i =4;i<= 82;i+=2)
 8000d8e:	2304      	movs	r3, #4
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	e03d      	b.n	8000e10 <xu_ly_tick_dht11+0x9c>
	{
			data_dht11[count_data_dht11/8] <<= 1;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	da00      	bge.n	8000d9c <xu_ly_tick_dht11+0x28>
 8000d9a:	3307      	adds	r3, #7
 8000d9c:	10db      	asrs	r3, r3, #3
 8000d9e:	4619      	mov	r1, r3
 8000da0:	460a      	mov	r2, r1
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	4413      	add	r3, r2
 8000da6:	781a      	ldrb	r2, [r3, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	440b      	add	r3, r1
 8000dac:	0052      	lsls	r2, r2, #1
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	701a      	strb	r2, [r3, #0]
			if( tick[i] > tick[i+1] ) {
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	4413      	add	r3, r2
 8000db8:	781a      	ldrb	r2, [r3, #0]
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	440b      	add	r3, r1
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d90d      	bls.n	8000de4 <xu_ly_tick_dht11+0x70>
				data_dht11[count_data_dht11/8] |= 0;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	da00      	bge.n	8000dd0 <xu_ly_tick_dht11+0x5c>
 8000dce:	3307      	adds	r3, #7
 8000dd0:	10db      	asrs	r3, r3, #3
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	460a      	mov	r2, r1
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	441a      	add	r2, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	440b      	add	r3, r1
 8000dde:	7812      	ldrb	r2, [r2, #0]
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e00f      	b.n	8000e04 <xu_ly_tick_dht11+0x90>
			}	else {

				data_dht11[count_data_dht11/8] |= 1;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	da00      	bge.n	8000dec <xu_ly_tick_dht11+0x78>
 8000dea:	3307      	adds	r3, #7
 8000dec:	10db      	asrs	r3, r3, #3
 8000dee:	4619      	mov	r1, r3
 8000df0:	460a      	mov	r2, r1
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	4413      	add	r3, r2
 8000df6:	781a      	ldrb	r2, [r3, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f042 0201 	orr.w	r2, r2, #1
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	701a      	strb	r2, [r3, #0]
			}
		count_data_dht11++;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3301      	adds	r3, #1
 8000e08:	60fb      	str	r3, [r7, #12]
	for(int i =4;i<= 82;i+=2)
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	2b52      	cmp	r3, #82	; 0x52
 8000e14:	ddbe      	ble.n	8000d94 <xu_ly_tick_dht11+0x20>
	}

}
 8000e16:	bf00      	nop
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000084 	.word	0x20000084

08000e24 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8000e24:	b5b0      	push	{r4, r5, r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e34:	d108      	bne.n	8000e48 <HAL_TIM_PeriodElapsedCallback+0x24>
		{
			count++;
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3c:	1c54      	adds	r4, r2, #1
 8000e3e:	f143 0500 	adc.w	r5, r3, #0
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000e44:	e9c3 4500 	strd	r4, r5, [r3]
		}
	if(htim->Instance == TIM3)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d105      	bne.n	8000e5e <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		flag_ngat_timer3=1;
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim3);
 8000e58:	4806      	ldr	r0, [pc, #24]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000e5a:	f001 f947 	bl	80020ec <HAL_TIM_Base_Stop_IT>
	}
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bdb0      	pop	{r4, r5, r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200001d8 	.word	0x200001d8
 8000e6c:	40000400 	.word	0x40000400
 8000e70:	20000004 	.word	0x20000004
 8000e74:	200000cc 	.word	0x200000cc

08000e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7c:	b672      	cpsid	i
}
 8000e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <Error_Handler+0x8>
	...

08000e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_MspInit+0x40>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <HAL_MspInit+0x40>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6193      	str	r3, [r2, #24]
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_MspInit+0x40>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_MspInit+0x40>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <HAL_MspInit+0x40>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	61d3      	str	r3, [r2, #28]
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HAL_MspInit+0x40>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ed8:	d114      	bne.n	8000f04 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_TIM_Base_MspInit+0x78>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	4a18      	ldr	r2, [pc, #96]	; (8000f40 <HAL_TIM_Base_MspInit+0x78>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	61d3      	str	r3, [r2, #28]
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <HAL_TIM_Base_MspInit+0x78>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	210a      	movs	r1, #10
 8000ef6:	201c      	movs	r0, #28
 8000ef8:	f000 fa67 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000efc:	201c      	movs	r0, #28
 8000efe:	f000 fa80 	bl	8001402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f02:	e018      	b.n	8000f36 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <HAL_TIM_Base_MspInit+0x7c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d113      	bne.n	8000f36 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <HAL_TIM_Base_MspInit+0x78>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <HAL_TIM_Base_MspInit+0x78>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	61d3      	str	r3, [r2, #28]
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <HAL_TIM_Base_MspInit+0x78>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 12, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	210c      	movs	r1, #12
 8000f2a:	201d      	movs	r0, #29
 8000f2c:	f000 fa4d 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f30:	201d      	movs	r0, #29
 8000f32:	f000 fa66 	bl	8001402 <HAL_NVIC_EnableIRQ>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40000400 	.word	0x40000400

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <NMI_Handler+0x4>

08000f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <BusFault_Handler+0x4>

08000f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <UsageFault_Handler+0x4>

08000f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr

08000f8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8e:	f000 f8e1 	bl	8001154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000f9a:	2002      	movs	r0, #2
 8000f9c:	f000 fc0e 	bl	80017bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000fa8:	2004      	movs	r0, #4
 8000faa:	f000 fc07 	bl	80017bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000fb6:	2008      	movs	r0, #8
 8000fb8:	f000 fc00 	bl	80017bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000fc4:	2010      	movs	r0, #16
 8000fc6:	f000 fbf9 	bl	80017bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000fd2:	2020      	movs	r0, #32
 8000fd4:	f000 fbf2 	bl	80017bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <TIM2_IRQHandler+0x10>)
 8000fe2:	f001 f8b1 	bl	8002148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000084 	.word	0x20000084

08000ff0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <TIM3_IRQHandler+0x10>)
 8000ff6:	f001 f8a7 	bl	8002148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200000cc 	.word	0x200000cc

08001004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <_sbrk+0x5c>)
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <_sbrk+0x60>)
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <_sbrk+0x64>)
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <_sbrk+0x68>)
 8001024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d207      	bcs.n	8001044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001034:	f001 fc0c 	bl	8002850 <__errno>
 8001038:	4603      	mov	r3, r0
 800103a:	220c      	movs	r2, #12
 800103c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	e009      	b.n	8001058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <_sbrk+0x64>)
 8001054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20005000 	.word	0x20005000
 8001064:	00000400 	.word	0x00000400
 8001068:	20000208 	.word	0x20000208
 800106c:	20000358 	.word	0x20000358

08001070 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800107c:	f7ff fff8 	bl	8001070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001080:	480b      	ldr	r0, [pc, #44]	; (80010b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001082:	490c      	ldr	r1, [pc, #48]	; (80010b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001084:	4a0c      	ldr	r2, [pc, #48]	; (80010b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a09      	ldr	r2, [pc, #36]	; (80010bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001098:	4c09      	ldr	r4, [pc, #36]	; (80010c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a6:	f001 fbd9 	bl	800285c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010aa:	f7ff f84f 	bl	800014c <main>
  bx lr
 80010ae:	4770      	bx	lr
  ldr r0, =_sdata
 80010b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80010b8:	08003200 	.word	0x08003200
  ldr r2, =_sbss
 80010bc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010c0:	20000358 	.word	0x20000358

080010c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC1_2_IRQHandler>
	...

080010c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <HAL_Init+0x28>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <HAL_Init+0x28>)
 80010d2:	f043 0310 	orr.w	r3, r3, #16
 80010d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d8:	2003      	movs	r0, #3
 80010da:	f000 f96b 	bl	80013b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010de:	200f      	movs	r0, #15
 80010e0:	f000 f808 	bl	80010f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e4:	f7ff fece 	bl	8000e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40022000 	.word	0x40022000

080010f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x54>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_InitTick+0x58>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110a:	fbb3 f3f1 	udiv	r3, r3, r1
 800110e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f991 	bl	800143a <HAL_SYSTICK_Config>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e00e      	b.n	8001140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b0f      	cmp	r3, #15
 8001126:	d80a      	bhi.n	800113e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001128:	2200      	movs	r2, #0
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	f000 f94b 	bl	80013ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001134:	4a06      	ldr	r2, [pc, #24]	; (8001150 <HAL_InitTick+0x5c>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	e000      	b.n	8001140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000008 	.word	0x20000008
 800114c:	20000010 	.word	0x20000010
 8001150:	2000000c 	.word	0x2000000c

08001154 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_IncTick+0x1c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	4b05      	ldr	r3, [pc, #20]	; (8001174 <HAL_IncTick+0x20>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4413      	add	r3, r2
 8001164:	4a03      	ldr	r2, [pc, #12]	; (8001174 <HAL_IncTick+0x20>)
 8001166:	6013      	str	r3, [r2, #0]
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	20000010 	.word	0x20000010
 8001174:	2000020c 	.word	0x2000020c

08001178 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b02      	ldr	r3, [pc, #8]	; (8001188 <HAL_GetTick+0x10>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	2000020c 	.word	0x2000020c

0800118c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001194:	f7ff fff0 	bl	8001178 <HAL_GetTick>
 8001198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a4:	d005      	beq.n	80011b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_Delay+0x44>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4413      	add	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011b2:	bf00      	nop
 80011b4:	f7ff ffe0 	bl	8001178 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d8f7      	bhi.n	80011b4 <HAL_Delay+0x28>
  {
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000010 	.word	0x20000010

080011d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f0:	4013      	ands	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001206:	4a04      	ldr	r2, [pc, #16]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	60d3      	str	r3, [r2, #12]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <__NVIC_GetPriorityGrouping+0x18>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f003 0307 	and.w	r3, r3, #7
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	2b00      	cmp	r3, #0
 8001248:	db0b      	blt.n	8001262 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f003 021f 	and.w	r2, r3, #31
 8001250:	4906      	ldr	r1, [pc, #24]	; (800126c <__NVIC_EnableIRQ+0x34>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	095b      	lsrs	r3, r3, #5
 8001258:	2001      	movs	r0, #1
 800125a:	fa00 f202 	lsl.w	r2, r0, r2
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	e000e100 	.word	0xe000e100

08001270 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	2b00      	cmp	r3, #0
 8001280:	db12      	blt.n	80012a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	f003 021f 	and.w	r2, r3, #31
 8001288:	490a      	ldr	r1, [pc, #40]	; (80012b4 <__NVIC_DisableIRQ+0x44>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	095b      	lsrs	r3, r3, #5
 8001290:	2001      	movs	r0, #1
 8001292:	fa00 f202 	lsl.w	r2, r0, r2
 8001296:	3320      	adds	r3, #32
 8001298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800129c:	f3bf 8f4f 	dsb	sy
}
 80012a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012a2:	f3bf 8f6f 	isb	sy
}
 80012a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000e100 	.word	0xe000e100

080012b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	db0a      	blt.n	80012e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	490c      	ldr	r1, [pc, #48]	; (8001304 <__NVIC_SetPriority+0x4c>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	440b      	add	r3, r1
 80012dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e0:	e00a      	b.n	80012f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4908      	ldr	r1, [pc, #32]	; (8001308 <__NVIC_SetPriority+0x50>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	3b04      	subs	r3, #4
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	440b      	add	r3, r1
 80012f6:	761a      	strb	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f1c3 0307 	rsb	r3, r3, #7
 8001326:	2b04      	cmp	r3, #4
 8001328:	bf28      	it	cs
 800132a:	2304      	movcs	r3, #4
 800132c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3304      	adds	r3, #4
 8001332:	2b06      	cmp	r3, #6
 8001334:	d902      	bls.n	800133c <NVIC_EncodePriority+0x30>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3b03      	subs	r3, #3
 800133a:	e000      	b.n	800133e <NVIC_EncodePriority+0x32>
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001354:	f04f 31ff 	mov.w	r1, #4294967295
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43d9      	mvns	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	4313      	orrs	r3, r2
         );
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001380:	d301      	bcc.n	8001386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001382:	2301      	movs	r3, #1
 8001384:	e00f      	b.n	80013a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <SysTick_Config+0x40>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138e:	210f      	movs	r1, #15
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f7ff ff90 	bl	80012b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <SysTick_Config+0x40>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <SysTick_Config+0x40>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff09 	bl	80011d4 <__NVIC_SetPriorityGrouping>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013dc:	f7ff ff1e 	bl	800121c <__NVIC_GetPriorityGrouping>
 80013e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	6978      	ldr	r0, [r7, #20]
 80013e8:	f7ff ff90 	bl	800130c <NVIC_EncodePriority>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff5f 	bl	80012b8 <__NVIC_SetPriority>
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff11 	bl	8001238 <__NVIC_EnableIRQ>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff1f 	bl	8001270 <__NVIC_DisableIRQ>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ff94 	bl	8001370 <SysTick_Config>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b08b      	sub	sp, #44	; 0x2c
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001466:	e169      	b.n	800173c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001468:	2201      	movs	r2, #1
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	429a      	cmp	r2, r3
 8001482:	f040 8158 	bne.w	8001736 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	4a9a      	ldr	r2, [pc, #616]	; (80016f4 <HAL_GPIO_Init+0x2a0>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d05e      	beq.n	800154e <HAL_GPIO_Init+0xfa>
 8001490:	4a98      	ldr	r2, [pc, #608]	; (80016f4 <HAL_GPIO_Init+0x2a0>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d875      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 8001496:	4a98      	ldr	r2, [pc, #608]	; (80016f8 <HAL_GPIO_Init+0x2a4>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d058      	beq.n	800154e <HAL_GPIO_Init+0xfa>
 800149c:	4a96      	ldr	r2, [pc, #600]	; (80016f8 <HAL_GPIO_Init+0x2a4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d86f      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 80014a2:	4a96      	ldr	r2, [pc, #600]	; (80016fc <HAL_GPIO_Init+0x2a8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d052      	beq.n	800154e <HAL_GPIO_Init+0xfa>
 80014a8:	4a94      	ldr	r2, [pc, #592]	; (80016fc <HAL_GPIO_Init+0x2a8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d869      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 80014ae:	4a94      	ldr	r2, [pc, #592]	; (8001700 <HAL_GPIO_Init+0x2ac>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d04c      	beq.n	800154e <HAL_GPIO_Init+0xfa>
 80014b4:	4a92      	ldr	r2, [pc, #584]	; (8001700 <HAL_GPIO_Init+0x2ac>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d863      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 80014ba:	4a92      	ldr	r2, [pc, #584]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d046      	beq.n	800154e <HAL_GPIO_Init+0xfa>
 80014c0:	4a90      	ldr	r2, [pc, #576]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d85d      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 80014c6:	2b12      	cmp	r3, #18
 80014c8:	d82a      	bhi.n	8001520 <HAL_GPIO_Init+0xcc>
 80014ca:	2b12      	cmp	r3, #18
 80014cc:	d859      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 80014ce:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <HAL_GPIO_Init+0x80>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	0800154f 	.word	0x0800154f
 80014d8:	08001529 	.word	0x08001529
 80014dc:	0800153b 	.word	0x0800153b
 80014e0:	0800157d 	.word	0x0800157d
 80014e4:	08001583 	.word	0x08001583
 80014e8:	08001583 	.word	0x08001583
 80014ec:	08001583 	.word	0x08001583
 80014f0:	08001583 	.word	0x08001583
 80014f4:	08001583 	.word	0x08001583
 80014f8:	08001583 	.word	0x08001583
 80014fc:	08001583 	.word	0x08001583
 8001500:	08001583 	.word	0x08001583
 8001504:	08001583 	.word	0x08001583
 8001508:	08001583 	.word	0x08001583
 800150c:	08001583 	.word	0x08001583
 8001510:	08001583 	.word	0x08001583
 8001514:	08001583 	.word	0x08001583
 8001518:	08001531 	.word	0x08001531
 800151c:	08001545 	.word	0x08001545
 8001520:	4a79      	ldr	r2, [pc, #484]	; (8001708 <HAL_GPIO_Init+0x2b4>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d013      	beq.n	800154e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001526:	e02c      	b.n	8001582 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	623b      	str	r3, [r7, #32]
          break;
 800152e:	e029      	b.n	8001584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	3304      	adds	r3, #4
 8001536:	623b      	str	r3, [r7, #32]
          break;
 8001538:	e024      	b.n	8001584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	3308      	adds	r3, #8
 8001540:	623b      	str	r3, [r7, #32]
          break;
 8001542:	e01f      	b.n	8001584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	330c      	adds	r3, #12
 800154a:	623b      	str	r3, [r7, #32]
          break;
 800154c:	e01a      	b.n	8001584 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d102      	bne.n	800155c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001556:	2304      	movs	r3, #4
 8001558:	623b      	str	r3, [r7, #32]
          break;
 800155a:	e013      	b.n	8001584 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d105      	bne.n	8001570 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001564:	2308      	movs	r3, #8
 8001566:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69fa      	ldr	r2, [r7, #28]
 800156c:	611a      	str	r2, [r3, #16]
          break;
 800156e:	e009      	b.n	8001584 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001570:	2308      	movs	r3, #8
 8001572:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	615a      	str	r2, [r3, #20]
          break;
 800157a:	e003      	b.n	8001584 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
          break;
 8001580:	e000      	b.n	8001584 <HAL_GPIO_Init+0x130>
          break;
 8001582:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	2bff      	cmp	r3, #255	; 0xff
 8001588:	d801      	bhi.n	800158e <HAL_GPIO_Init+0x13a>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	e001      	b.n	8001592 <HAL_GPIO_Init+0x13e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3304      	adds	r3, #4
 8001592:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2bff      	cmp	r3, #255	; 0xff
 8001598:	d802      	bhi.n	80015a0 <HAL_GPIO_Init+0x14c>
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	e002      	b.n	80015a6 <HAL_GPIO_Init+0x152>
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	3b08      	subs	r3, #8
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	210f      	movs	r1, #15
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	401a      	ands	r2, r3
 80015b8:	6a39      	ldr	r1, [r7, #32]
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	431a      	orrs	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 80b1 	beq.w	8001736 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015d4:	4b4d      	ldr	r3, [pc, #308]	; (800170c <HAL_GPIO_Init+0x2b8>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a4c      	ldr	r2, [pc, #304]	; (800170c <HAL_GPIO_Init+0x2b8>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b4a      	ldr	r3, [pc, #296]	; (800170c <HAL_GPIO_Init+0x2b8>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015ec:	4a48      	ldr	r2, [pc, #288]	; (8001710 <HAL_GPIO_Init+0x2bc>)
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	089b      	lsrs	r3, r3, #2
 80015f2:	3302      	adds	r3, #2
 80015f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	220f      	movs	r2, #15
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	4013      	ands	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a40      	ldr	r2, [pc, #256]	; (8001714 <HAL_GPIO_Init+0x2c0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d013      	beq.n	8001640 <HAL_GPIO_Init+0x1ec>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a3f      	ldr	r2, [pc, #252]	; (8001718 <HAL_GPIO_Init+0x2c4>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d00d      	beq.n	800163c <HAL_GPIO_Init+0x1e8>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a3e      	ldr	r2, [pc, #248]	; (800171c <HAL_GPIO_Init+0x2c8>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d007      	beq.n	8001638 <HAL_GPIO_Init+0x1e4>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a3d      	ldr	r2, [pc, #244]	; (8001720 <HAL_GPIO_Init+0x2cc>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d101      	bne.n	8001634 <HAL_GPIO_Init+0x1e0>
 8001630:	2303      	movs	r3, #3
 8001632:	e006      	b.n	8001642 <HAL_GPIO_Init+0x1ee>
 8001634:	2304      	movs	r3, #4
 8001636:	e004      	b.n	8001642 <HAL_GPIO_Init+0x1ee>
 8001638:	2302      	movs	r3, #2
 800163a:	e002      	b.n	8001642 <HAL_GPIO_Init+0x1ee>
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <HAL_GPIO_Init+0x1ee>
 8001640:	2300      	movs	r3, #0
 8001642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001644:	f002 0203 	and.w	r2, r2, #3
 8001648:	0092      	lsls	r2, r2, #2
 800164a:	4093      	lsls	r3, r2
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	4313      	orrs	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001652:	492f      	ldr	r1, [pc, #188]	; (8001710 <HAL_GPIO_Init+0x2bc>)
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	3302      	adds	r3, #2
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800166c:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	492c      	ldr	r1, [pc, #176]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	608b      	str	r3, [r1, #8]
 8001678:	e006      	b.n	8001688 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800167a:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	43db      	mvns	r3, r3
 8001682:	4928      	ldr	r1, [pc, #160]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 8001684:	4013      	ands	r3, r2
 8001686:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001694:	4b23      	ldr	r3, [pc, #140]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	4922      	ldr	r1, [pc, #136]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	60cb      	str	r3, [r1, #12]
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	491e      	ldr	r1, [pc, #120]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016bc:	4b19      	ldr	r3, [pc, #100]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	4918      	ldr	r1, [pc, #96]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	4914      	ldr	r1, [pc, #80]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d021      	beq.n	8001728 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	490e      	ldr	r1, [pc, #56]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	600b      	str	r3, [r1, #0]
 80016f0:	e021      	b.n	8001736 <HAL_GPIO_Init+0x2e2>
 80016f2:	bf00      	nop
 80016f4:	10320000 	.word	0x10320000
 80016f8:	10310000 	.word	0x10310000
 80016fc:	10220000 	.word	0x10220000
 8001700:	10210000 	.word	0x10210000
 8001704:	10120000 	.word	0x10120000
 8001708:	10110000 	.word	0x10110000
 800170c:	40021000 	.word	0x40021000
 8001710:	40010000 	.word	0x40010000
 8001714:	40010800 	.word	0x40010800
 8001718:	40010c00 	.word	0x40010c00
 800171c:	40011000 	.word	0x40011000
 8001720:	40011400 	.word	0x40011400
 8001724:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_GPIO_Init+0x304>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	43db      	mvns	r3, r3
 8001730:	4909      	ldr	r1, [pc, #36]	; (8001758 <HAL_GPIO_Init+0x304>)
 8001732:	4013      	ands	r3, r2
 8001734:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	3301      	adds	r3, #1
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	fa22 f303 	lsr.w	r3, r2, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	f47f ae8e 	bne.w	8001468 <HAL_GPIO_Init+0x14>
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	372c      	adds	r7, #44	; 0x2c
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	40010400 	.word	0x40010400

0800175c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	887b      	ldrh	r3, [r7, #2]
 800176e:	4013      	ands	r3, r2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001774:	2301      	movs	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	e001      	b.n	800177e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	460b      	mov	r3, r1
 8001794:	807b      	strh	r3, [r7, #2]
 8001796:	4613      	mov	r3, r2
 8001798:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800179a:	787b      	ldrb	r3, [r7, #1]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017a0:	887a      	ldrh	r2, [r7, #2]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017a6:	e003      	b.n	80017b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017a8:	887b      	ldrh	r3, [r7, #2]
 80017aa:	041a      	lsls	r2, r3, #16
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	611a      	str	r2, [r3, #16]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
	...

080017bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017c6:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d006      	beq.n	80017e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017d2:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017d8:	88fb      	ldrh	r3, [r7, #6]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fe5c 	bl	8000498 <HAL_GPIO_EXTI_Callback>
  }
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40010400 	.word	0x40010400

080017ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e272      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 8087 	beq.w	800191a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800180c:	4b92      	ldr	r3, [pc, #584]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	2b04      	cmp	r3, #4
 8001816:	d00c      	beq.n	8001832 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001818:	4b8f      	ldr	r3, [pc, #572]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b08      	cmp	r3, #8
 8001822:	d112      	bne.n	800184a <HAL_RCC_OscConfig+0x5e>
 8001824:	4b8c      	ldr	r3, [pc, #560]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001830:	d10b      	bne.n	800184a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001832:	4b89      	ldr	r3, [pc, #548]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d06c      	beq.n	8001918 <HAL_RCC_OscConfig+0x12c>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d168      	bne.n	8001918 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e24c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001852:	d106      	bne.n	8001862 <HAL_RCC_OscConfig+0x76>
 8001854:	4b80      	ldr	r3, [pc, #512]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a7f      	ldr	r2, [pc, #508]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 800185a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	e02e      	b.n	80018c0 <HAL_RCC_OscConfig+0xd4>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10c      	bne.n	8001884 <HAL_RCC_OscConfig+0x98>
 800186a:	4b7b      	ldr	r3, [pc, #492]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a7a      	ldr	r2, [pc, #488]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	4b78      	ldr	r3, [pc, #480]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a77      	ldr	r2, [pc, #476]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 800187c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e01d      	b.n	80018c0 <HAL_RCC_OscConfig+0xd4>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0xbc>
 800188e:	4b72      	ldr	r3, [pc, #456]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a71      	ldr	r2, [pc, #452]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4b6f      	ldr	r3, [pc, #444]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a6e      	ldr	r2, [pc, #440]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e00b      	b.n	80018c0 <HAL_RCC_OscConfig+0xd4>
 80018a8:	4b6b      	ldr	r3, [pc, #428]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a6a      	ldr	r2, [pc, #424]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	4b68      	ldr	r3, [pc, #416]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a67      	ldr	r2, [pc, #412]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d013      	beq.n	80018f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff fc56 	bl	8001178 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d0:	f7ff fc52 	bl	8001178 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	; 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e200      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	4b5d      	ldr	r3, [pc, #372]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0xe4>
 80018ee:	e014      	b.n	800191a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fc42 	bl	8001178 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f8:	f7ff fc3e 	bl	8001178 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b64      	cmp	r3, #100	; 0x64
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e1ec      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190a:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x10c>
 8001916:	e000      	b.n	800191a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d063      	beq.n	80019ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001926:	4b4c      	ldr	r3, [pc, #304]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00b      	beq.n	800194a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001932:	4b49      	ldr	r3, [pc, #292]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b08      	cmp	r3, #8
 800193c:	d11c      	bne.n	8001978 <HAL_RCC_OscConfig+0x18c>
 800193e:	4b46      	ldr	r3, [pc, #280]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d116      	bne.n	8001978 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194a:	4b43      	ldr	r3, [pc, #268]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <HAL_RCC_OscConfig+0x176>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d001      	beq.n	8001962 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e1c0      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001962:	4b3d      	ldr	r3, [pc, #244]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4939      	ldr	r1, [pc, #228]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001976:	e03a      	b.n	80019ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d020      	beq.n	80019c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001980:	4b36      	ldr	r3, [pc, #216]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001986:	f7ff fbf7 	bl	8001178 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198e:	f7ff fbf3 	bl	8001178 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e1a1      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a0:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ac:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4927      	ldr	r1, [pc, #156]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	600b      	str	r3, [r1, #0]
 80019c0:	e015      	b.n	80019ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c2:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff fbd6 	bl	8001178 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d0:	f7ff fbd2 	bl	8001178 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e180      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e2:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d03a      	beq.n	8001a70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d019      	beq.n	8001a36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a02:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a08:	f7ff fbb6 	bl	8001178 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a10:	f7ff fbb2 	bl	8001178 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e160      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a22:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a2e:	2001      	movs	r0, #1
 8001a30:	f000 fa9c 	bl	8001f6c <RCC_Delay>
 8001a34:	e01c      	b.n	8001a70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3c:	f7ff fb9c 	bl	8001178 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a42:	e00f      	b.n	8001a64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a44:	f7ff fb98 	bl	8001178 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d908      	bls.n	8001a64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e146      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4f8>
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	42420000 	.word	0x42420000
 8001a60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a64:	4b92      	ldr	r3, [pc, #584]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1e9      	bne.n	8001a44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 80a6 	beq.w	8001bca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a82:	4b8b      	ldr	r3, [pc, #556]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10d      	bne.n	8001aaa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	4b88      	ldr	r3, [pc, #544]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	4a87      	ldr	r2, [pc, #540]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a98:	61d3      	str	r3, [r2, #28]
 8001a9a:	4b85      	ldr	r3, [pc, #532]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aaa:	4b82      	ldr	r3, [pc, #520]	; (8001cb4 <HAL_RCC_OscConfig+0x4c8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d118      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab6:	4b7f      	ldr	r3, [pc, #508]	; (8001cb4 <HAL_RCC_OscConfig+0x4c8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a7e      	ldr	r2, [pc, #504]	; (8001cb4 <HAL_RCC_OscConfig+0x4c8>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac2:	f7ff fb59 	bl	8001178 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aca:	f7ff fb55 	bl	8001178 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b64      	cmp	r3, #100	; 0x64
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e103      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	4b75      	ldr	r3, [pc, #468]	; (8001cb4 <HAL_RCC_OscConfig+0x4c8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d106      	bne.n	8001afe <HAL_RCC_OscConfig+0x312>
 8001af0:	4b6f      	ldr	r3, [pc, #444]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	4a6e      	ldr	r2, [pc, #440]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6213      	str	r3, [r2, #32]
 8001afc:	e02d      	b.n	8001b5a <HAL_RCC_OscConfig+0x36e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x334>
 8001b06:	4b6a      	ldr	r3, [pc, #424]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	4a69      	ldr	r2, [pc, #420]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	f023 0301 	bic.w	r3, r3, #1
 8001b10:	6213      	str	r3, [r2, #32]
 8001b12:	4b67      	ldr	r3, [pc, #412]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	4a66      	ldr	r2, [pc, #408]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	f023 0304 	bic.w	r3, r3, #4
 8001b1c:	6213      	str	r3, [r2, #32]
 8001b1e:	e01c      	b.n	8001b5a <HAL_RCC_OscConfig+0x36e>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2b05      	cmp	r3, #5
 8001b26:	d10c      	bne.n	8001b42 <HAL_RCC_OscConfig+0x356>
 8001b28:	4b61      	ldr	r3, [pc, #388]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	4a60      	ldr	r2, [pc, #384]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	f043 0304 	orr.w	r3, r3, #4
 8001b32:	6213      	str	r3, [r2, #32]
 8001b34:	4b5e      	ldr	r3, [pc, #376]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	4a5d      	ldr	r2, [pc, #372]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6213      	str	r3, [r2, #32]
 8001b40:	e00b      	b.n	8001b5a <HAL_RCC_OscConfig+0x36e>
 8001b42:	4b5b      	ldr	r3, [pc, #364]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	4a5a      	ldr	r2, [pc, #360]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	6213      	str	r3, [r2, #32]
 8001b4e:	4b58      	ldr	r3, [pc, #352]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4a57      	ldr	r2, [pc, #348]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	f023 0304 	bic.w	r3, r3, #4
 8001b58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d015      	beq.n	8001b8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b62:	f7ff fb09 	bl	8001178 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b68:	e00a      	b.n	8001b80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7ff fb05 	bl	8001178 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e0b1      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b80:	4b4b      	ldr	r3, [pc, #300]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0ee      	beq.n	8001b6a <HAL_RCC_OscConfig+0x37e>
 8001b8c:	e014      	b.n	8001bb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff faf3 	bl	8001178 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b94:	e00a      	b.n	8001bac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b96:	f7ff faef 	bl	8001178 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e09b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bac:	4b40      	ldr	r3, [pc, #256]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1ee      	bne.n	8001b96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bb8:	7dfb      	ldrb	r3, [r7, #23]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d105      	bne.n	8001bca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bbe:	4b3c      	ldr	r3, [pc, #240]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	4a3b      	ldr	r2, [pc, #236]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8087 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd4:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d061      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d146      	bne.n	8001c76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be8:	4b33      	ldr	r3, [pc, #204]	; (8001cb8 <HAL_RCC_OscConfig+0x4cc>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bee:	f7ff fac3 	bl	8001178 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7ff fabf 	bl	8001178 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e06d      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c08:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1f0      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1c:	d108      	bne.n	8001c30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c1e:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	4921      	ldr	r1, [pc, #132]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c30:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a19      	ldr	r1, [r3, #32]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	430b      	orrs	r3, r1
 8001c42:	491b      	ldr	r1, [pc, #108]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HAL_RCC_OscConfig+0x4cc>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4e:	f7ff fa93 	bl	8001178 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c56:	f7ff fa8f 	bl	8001178 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e03d      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x46a>
 8001c74:	e035      	b.n	8001ce2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <HAL_RCC_OscConfig+0x4cc>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fa7c 	bl	8001178 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c84:	f7ff fa78 	bl	8001178 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e026      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x498>
 8001ca2:	e01e      	b.n	8001ce2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d107      	bne.n	8001cbc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e019      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4f8>
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40007000 	.word	0x40007000
 8001cb8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_OscConfig+0x500>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d106      	bne.n	8001cde <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000

08001cf0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0d0      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d04:	4b6a      	ldr	r3, [pc, #424]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d910      	bls.n	8001d34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b67      	ldr	r3, [pc, #412]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 0207 	bic.w	r2, r3, #7
 8001d1a:	4965      	ldr	r1, [pc, #404]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	4b63      	ldr	r3, [pc, #396]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0b8      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d020      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d4c:	4b59      	ldr	r3, [pc, #356]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	4a58      	ldr	r2, [pc, #352]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d64:	4b53      	ldr	r3, [pc, #332]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4a52      	ldr	r2, [pc, #328]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d70:	4b50      	ldr	r3, [pc, #320]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	494d      	ldr	r1, [pc, #308]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d040      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d96:	4b47      	ldr	r3, [pc, #284]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d115      	bne.n	8001dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e07f      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dae:	4b41      	ldr	r3, [pc, #260]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d109      	bne.n	8001dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e073      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e06b      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dce:	4b39      	ldr	r3, [pc, #228]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f023 0203 	bic.w	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	4936      	ldr	r1, [pc, #216]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de0:	f7ff f9ca 	bl	8001178 <HAL_GetTick>
 8001de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de6:	e00a      	b.n	8001dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de8:	f7ff f9c6 	bl	8001178 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e053      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	4b2d      	ldr	r3, [pc, #180]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 020c 	and.w	r2, r3, #12
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d1eb      	bne.n	8001de8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e10:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d210      	bcs.n	8001e40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1e:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 0207 	bic.w	r2, r3, #7
 8001e26:	4922      	ldr	r1, [pc, #136]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2e:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d001      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e032      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e4c:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	4916      	ldr	r1, [pc, #88]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d009      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	490e      	ldr	r1, [pc, #56]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e7e:	f000 f821 	bl	8001ec4 <HAL_RCC_GetSysClockFreq>
 8001e82:	4602      	mov	r2, r0
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	091b      	lsrs	r3, r3, #4
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	490a      	ldr	r1, [pc, #40]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e90:	5ccb      	ldrb	r3, [r1, r3]
 8001e92:	fa22 f303 	lsr.w	r3, r2, r3
 8001e96:	4a09      	ldr	r2, [pc, #36]	; (8001ebc <HAL_RCC_ClockConfig+0x1cc>)
 8001e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_RCC_ClockConfig+0x1d0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff f928 	bl	80010f4 <HAL_InitTick>

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40022000 	.word	0x40022000
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	080031a0 	.word	0x080031a0
 8001ebc:	20000008 	.word	0x20000008
 8001ec0:	2000000c 	.word	0x2000000c

08001ec4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ede:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d002      	beq.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x30>
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d003      	beq.n	8001efa <HAL_RCC_GetSysClockFreq+0x36>
 8001ef2:	e027      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ef6:	613b      	str	r3, [r7, #16]
      break;
 8001ef8:	e027      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	0c9b      	lsrs	r3, r3, #18
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f04:	5cd3      	ldrb	r3, [r2, r3]
 8001f06:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d010      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	0c5b      	lsrs	r3, r3, #17
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	4a11      	ldr	r2, [pc, #68]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f1e:	5cd3      	ldrb	r3, [r2, r3]
 8001f20:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a0d      	ldr	r2, [pc, #52]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001f26:	fb03 f202 	mul.w	r2, r3, r2
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	e004      	b.n	8001f3e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a0c      	ldr	r2, [pc, #48]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f38:	fb02 f303 	mul.w	r3, r2, r3
 8001f3c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	613b      	str	r3, [r7, #16]
      break;
 8001f42:	e002      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001f46:	613b      	str	r3, [r7, #16]
      break;
 8001f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f4a:	693b      	ldr	r3, [r7, #16]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	371c      	adds	r7, #28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	007a1200 	.word	0x007a1200
 8001f60:	080031b0 	.word	0x080031b0
 8001f64:	080031c0 	.word	0x080031c0
 8001f68:	003d0900 	.word	0x003d0900

08001f6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f74:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <RCC_Delay+0x34>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <RCC_Delay+0x38>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	0a5b      	lsrs	r3, r3, #9
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	fb02 f303 	mul.w	r3, r2, r3
 8001f86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f88:	bf00      	nop
  }
  while (Delay --);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1e5a      	subs	r2, r3, #1
 8001f8e:	60fa      	str	r2, [r7, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f9      	bne.n	8001f88 <RCC_Delay+0x1c>
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	20000008 	.word	0x20000008
 8001fa4:	10624dd3 	.word	0x10624dd3

08001fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e041      	b.n	800203e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe ff7a 	bl	8000ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	f000 faa2 	bl	8002530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d001      	beq.n	8002060 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e03a      	b.n	80020d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a18      	ldr	r2, [pc, #96]	; (80020e0 <HAL_TIM_Base_Start_IT+0x98>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00e      	beq.n	80020a0 <HAL_TIM_Base_Start_IT+0x58>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208a:	d009      	beq.n	80020a0 <HAL_TIM_Base_Start_IT+0x58>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a14      	ldr	r2, [pc, #80]	; (80020e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d004      	beq.n	80020a0 <HAL_TIM_Base_Start_IT+0x58>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a13      	ldr	r2, [pc, #76]	; (80020e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d111      	bne.n	80020c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d010      	beq.n	80020d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 0201 	orr.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c2:	e007      	b.n	80020d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0201 	orr.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr
 80020e0:	40012c00 	.word	0x40012c00
 80020e4:	40000400 	.word	0x40000400
 80020e8:	40000800 	.word	0x40000800

080020ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0201 	bic.w	r2, r2, #1
 8002102:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6a1a      	ldr	r2, [r3, #32]
 800210a:	f241 1311 	movw	r3, #4369	; 0x1111
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10f      	bne.n	8002134 <HAL_TIM_Base_Stop_IT+0x48>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6a1a      	ldr	r2, [r3, #32]
 800211a:	f240 4344 	movw	r3, #1092	; 0x444
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d107      	bne.n	8002134 <HAL_TIM_Base_Stop_IT+0x48>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b02      	cmp	r3, #2
 800215c:	d122      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b02      	cmp	r3, #2
 800216a:	d11b      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0202 	mvn.w	r2, #2
 8002174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f9b4 	bl	80024f8 <HAL_TIM_IC_CaptureCallback>
 8002190:	e005      	b.n	800219e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f9a7 	bl	80024e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f9b6 	bl	800250a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d122      	bne.n	80021f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d11b      	bne.n	80021f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0204 	mvn.w	r2, #4
 80021c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2202      	movs	r2, #2
 80021ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f98a 	bl	80024f8 <HAL_TIM_IC_CaptureCallback>
 80021e4:	e005      	b.n	80021f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f97d 	bl	80024e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f98c 	bl	800250a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b08      	cmp	r3, #8
 8002204:	d122      	bne.n	800224c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b08      	cmp	r3, #8
 8002212:	d11b      	bne.n	800224c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0208 	mvn.w	r2, #8
 800221c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2204      	movs	r2, #4
 8002222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f960 	bl	80024f8 <HAL_TIM_IC_CaptureCallback>
 8002238:	e005      	b.n	8002246 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f953 	bl	80024e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f962 	bl	800250a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b10      	cmp	r3, #16
 8002258:	d122      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0310 	and.w	r3, r3, #16
 8002264:	2b10      	cmp	r3, #16
 8002266:	d11b      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0210 	mvn.w	r2, #16
 8002270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2208      	movs	r2, #8
 8002276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f936 	bl	80024f8 <HAL_TIM_IC_CaptureCallback>
 800228c:	e005      	b.n	800229a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f929 	bl	80024e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f938 	bl	800250a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d10e      	bne.n	80022cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d107      	bne.n	80022cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0201 	mvn.w	r2, #1
 80022c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fe fdac 	bl	8000e24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d6:	2b80      	cmp	r3, #128	; 0x80
 80022d8:	d10e      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e4:	2b80      	cmp	r3, #128	; 0x80
 80022e6:	d107      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fa7b 	bl	80027ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002302:	2b40      	cmp	r3, #64	; 0x40
 8002304:	d10e      	bne.n	8002324 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002310:	2b40      	cmp	r3, #64	; 0x40
 8002312:	d107      	bne.n	8002324 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800231c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f8fc 	bl	800251c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	2b20      	cmp	r3, #32
 8002330:	d10e      	bne.n	8002350 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	2b20      	cmp	r3, #32
 800233e:	d107      	bne.n	8002350 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0220 	mvn.w	r2, #32
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fa46 	bl	80027dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_TIM_ConfigClockSource+0x1c>
 8002370:	2302      	movs	r3, #2
 8002372:	e0b4      	b.n	80024de <HAL_TIM_ConfigClockSource+0x186>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800239a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ac:	d03e      	beq.n	800242c <HAL_TIM_ConfigClockSource+0xd4>
 80023ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b2:	f200 8087 	bhi.w	80024c4 <HAL_TIM_ConfigClockSource+0x16c>
 80023b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ba:	f000 8086 	beq.w	80024ca <HAL_TIM_ConfigClockSource+0x172>
 80023be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c2:	d87f      	bhi.n	80024c4 <HAL_TIM_ConfigClockSource+0x16c>
 80023c4:	2b70      	cmp	r3, #112	; 0x70
 80023c6:	d01a      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0xa6>
 80023c8:	2b70      	cmp	r3, #112	; 0x70
 80023ca:	d87b      	bhi.n	80024c4 <HAL_TIM_ConfigClockSource+0x16c>
 80023cc:	2b60      	cmp	r3, #96	; 0x60
 80023ce:	d050      	beq.n	8002472 <HAL_TIM_ConfigClockSource+0x11a>
 80023d0:	2b60      	cmp	r3, #96	; 0x60
 80023d2:	d877      	bhi.n	80024c4 <HAL_TIM_ConfigClockSource+0x16c>
 80023d4:	2b50      	cmp	r3, #80	; 0x50
 80023d6:	d03c      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0xfa>
 80023d8:	2b50      	cmp	r3, #80	; 0x50
 80023da:	d873      	bhi.n	80024c4 <HAL_TIM_ConfigClockSource+0x16c>
 80023dc:	2b40      	cmp	r3, #64	; 0x40
 80023de:	d058      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0x13a>
 80023e0:	2b40      	cmp	r3, #64	; 0x40
 80023e2:	d86f      	bhi.n	80024c4 <HAL_TIM_ConfigClockSource+0x16c>
 80023e4:	2b30      	cmp	r3, #48	; 0x30
 80023e6:	d064      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x15a>
 80023e8:	2b30      	cmp	r3, #48	; 0x30
 80023ea:	d86b      	bhi.n	80024c4 <HAL_TIM_ConfigClockSource+0x16c>
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d060      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x15a>
 80023f0:	2b20      	cmp	r3, #32
 80023f2:	d867      	bhi.n	80024c4 <HAL_TIM_ConfigClockSource+0x16c>
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d05c      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x15a>
 80023f8:	2b10      	cmp	r3, #16
 80023fa:	d05a      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x15a>
 80023fc:	e062      	b.n	80024c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800240e:	f000 f968 	bl	80026e2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	609a      	str	r2, [r3, #8]
      break;
 800242a:	e04f      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800243c:	f000 f951 	bl	80026e2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800244e:	609a      	str	r2, [r3, #8]
      break;
 8002450:	e03c      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800245e:	461a      	mov	r2, r3
 8002460:	f000 f8c8 	bl	80025f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2150      	movs	r1, #80	; 0x50
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f91f 	bl	80026ae <TIM_ITRx_SetConfig>
      break;
 8002470:	e02c      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800247e:	461a      	mov	r2, r3
 8002480:	f000 f8e6 	bl	8002650 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2160      	movs	r1, #96	; 0x60
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f90f 	bl	80026ae <TIM_ITRx_SetConfig>
      break;
 8002490:	e01c      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800249e:	461a      	mov	r2, r3
 80024a0:	f000 f8a8 	bl	80025f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2140      	movs	r1, #64	; 0x40
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f8ff 	bl	80026ae <TIM_ITRx_SetConfig>
      break;
 80024b0:	e00c      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4619      	mov	r1, r3
 80024bc:	4610      	mov	r0, r2
 80024be:	f000 f8f6 	bl	80026ae <TIM_ITRx_SetConfig>
      break;
 80024c2:	e003      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	73fb      	strb	r3, [r7, #15]
      break;
 80024c8:	e000      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr

0800250a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
	...

08002530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a29      	ldr	r2, [pc, #164]	; (80025e8 <TIM_Base_SetConfig+0xb8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d00b      	beq.n	8002560 <TIM_Base_SetConfig+0x30>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254e:	d007      	beq.n	8002560 <TIM_Base_SetConfig+0x30>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a26      	ldr	r2, [pc, #152]	; (80025ec <TIM_Base_SetConfig+0xbc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d003      	beq.n	8002560 <TIM_Base_SetConfig+0x30>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a25      	ldr	r2, [pc, #148]	; (80025f0 <TIM_Base_SetConfig+0xc0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d108      	bne.n	8002572 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <TIM_Base_SetConfig+0xb8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00b      	beq.n	8002592 <TIM_Base_SetConfig+0x62>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002580:	d007      	beq.n	8002592 <TIM_Base_SetConfig+0x62>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a19      	ldr	r2, [pc, #100]	; (80025ec <TIM_Base_SetConfig+0xbc>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d003      	beq.n	8002592 <TIM_Base_SetConfig+0x62>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a18      	ldr	r2, [pc, #96]	; (80025f0 <TIM_Base_SetConfig+0xc0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d108      	bne.n	80025a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <TIM_Base_SetConfig+0xb8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d103      	bne.n	80025d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	615a      	str	r2, [r3, #20]
}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	40012c00 	.word	0x40012c00
 80025ec:	40000400 	.word	0x40000400
 80025f0:	40000800 	.word	0x40000800

080025f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	f023 0201 	bic.w	r2, r3, #1
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800261e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f023 030a 	bic.w	r3, r3, #10
 8002630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	4313      	orrs	r3, r2
 8002638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	621a      	str	r2, [r3, #32]
}
 8002646:	bf00      	nop
 8002648:	371c      	adds	r7, #28
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	f023 0210 	bic.w	r2, r3, #16
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800267a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	031b      	lsls	r3, r3, #12
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800268c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	621a      	str	r2, [r3, #32]
}
 80026a4:	bf00      	nop
 80026a6:	371c      	adds	r7, #28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr

080026ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b085      	sub	sp, #20
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f043 0307 	orr.w	r3, r3, #7
 80026d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	609a      	str	r2, [r3, #8]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b087      	sub	sp, #28
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	021a      	lsls	r2, r3, #8
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	431a      	orrs	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	4313      	orrs	r3, r2
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	609a      	str	r2, [r3, #8]
}
 8002716:	bf00      	nop
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002734:	2302      	movs	r3, #2
 8002736:	e046      	b.n	80027c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a16      	ldr	r2, [pc, #88]	; (80027d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d00e      	beq.n	800279a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002784:	d009      	beq.n	800279a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a12      	ldr	r2, [pc, #72]	; (80027d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d004      	beq.n	800279a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a10      	ldr	r2, [pc, #64]	; (80027d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d10c      	bne.n	80027b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	40012c00 	.word	0x40012c00
 80027d4:	40000400 	.word	0x40000400
 80027d8:	40000800 	.word	0x40000800

080027dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <siprintf>:
 8002800:	b40e      	push	{r1, r2, r3}
 8002802:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002806:	b500      	push	{lr}
 8002808:	b09c      	sub	sp, #112	; 0x70
 800280a:	ab1d      	add	r3, sp, #116	; 0x74
 800280c:	9002      	str	r0, [sp, #8]
 800280e:	9006      	str	r0, [sp, #24]
 8002810:	9107      	str	r1, [sp, #28]
 8002812:	9104      	str	r1, [sp, #16]
 8002814:	4808      	ldr	r0, [pc, #32]	; (8002838 <siprintf+0x38>)
 8002816:	4909      	ldr	r1, [pc, #36]	; (800283c <siprintf+0x3c>)
 8002818:	f853 2b04 	ldr.w	r2, [r3], #4
 800281c:	9105      	str	r1, [sp, #20]
 800281e:	6800      	ldr	r0, [r0, #0]
 8002820:	a902      	add	r1, sp, #8
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	f000 f98e 	bl	8002b44 <_svfiprintf_r>
 8002828:	2200      	movs	r2, #0
 800282a:	9b02      	ldr	r3, [sp, #8]
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	b01c      	add	sp, #112	; 0x70
 8002830:	f85d eb04 	ldr.w	lr, [sp], #4
 8002834:	b003      	add	sp, #12
 8002836:	4770      	bx	lr
 8002838:	20000060 	.word	0x20000060
 800283c:	ffff0208 	.word	0xffff0208

08002840 <memset>:
 8002840:	4603      	mov	r3, r0
 8002842:	4402      	add	r2, r0
 8002844:	4293      	cmp	r3, r2
 8002846:	d100      	bne.n	800284a <memset+0xa>
 8002848:	4770      	bx	lr
 800284a:	f803 1b01 	strb.w	r1, [r3], #1
 800284e:	e7f9      	b.n	8002844 <memset+0x4>

08002850 <__errno>:
 8002850:	4b01      	ldr	r3, [pc, #4]	; (8002858 <__errno+0x8>)
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	20000060 	.word	0x20000060

0800285c <__libc_init_array>:
 800285c:	b570      	push	{r4, r5, r6, lr}
 800285e:	2600      	movs	r6, #0
 8002860:	4d0c      	ldr	r5, [pc, #48]	; (8002894 <__libc_init_array+0x38>)
 8002862:	4c0d      	ldr	r4, [pc, #52]	; (8002898 <__libc_init_array+0x3c>)
 8002864:	1b64      	subs	r4, r4, r5
 8002866:	10a4      	asrs	r4, r4, #2
 8002868:	42a6      	cmp	r6, r4
 800286a:	d109      	bne.n	8002880 <__libc_init_array+0x24>
 800286c:	f000 fc7a 	bl	8003164 <_init>
 8002870:	2600      	movs	r6, #0
 8002872:	4d0a      	ldr	r5, [pc, #40]	; (800289c <__libc_init_array+0x40>)
 8002874:	4c0a      	ldr	r4, [pc, #40]	; (80028a0 <__libc_init_array+0x44>)
 8002876:	1b64      	subs	r4, r4, r5
 8002878:	10a4      	asrs	r4, r4, #2
 800287a:	42a6      	cmp	r6, r4
 800287c:	d105      	bne.n	800288a <__libc_init_array+0x2e>
 800287e:	bd70      	pop	{r4, r5, r6, pc}
 8002880:	f855 3b04 	ldr.w	r3, [r5], #4
 8002884:	4798      	blx	r3
 8002886:	3601      	adds	r6, #1
 8002888:	e7ee      	b.n	8002868 <__libc_init_array+0xc>
 800288a:	f855 3b04 	ldr.w	r3, [r5], #4
 800288e:	4798      	blx	r3
 8002890:	3601      	adds	r6, #1
 8002892:	e7f2      	b.n	800287a <__libc_init_array+0x1e>
 8002894:	080031f8 	.word	0x080031f8
 8002898:	080031f8 	.word	0x080031f8
 800289c:	080031f8 	.word	0x080031f8
 80028a0:	080031fc 	.word	0x080031fc

080028a4 <__retarget_lock_acquire_recursive>:
 80028a4:	4770      	bx	lr

080028a6 <__retarget_lock_release_recursive>:
 80028a6:	4770      	bx	lr

080028a8 <_free_r>:
 80028a8:	b538      	push	{r3, r4, r5, lr}
 80028aa:	4605      	mov	r5, r0
 80028ac:	2900      	cmp	r1, #0
 80028ae:	d040      	beq.n	8002932 <_free_r+0x8a>
 80028b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028b4:	1f0c      	subs	r4, r1, #4
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	bfb8      	it	lt
 80028ba:	18e4      	addlt	r4, r4, r3
 80028bc:	f000 f8dc 	bl	8002a78 <__malloc_lock>
 80028c0:	4a1c      	ldr	r2, [pc, #112]	; (8002934 <_free_r+0x8c>)
 80028c2:	6813      	ldr	r3, [r2, #0]
 80028c4:	b933      	cbnz	r3, 80028d4 <_free_r+0x2c>
 80028c6:	6063      	str	r3, [r4, #4]
 80028c8:	6014      	str	r4, [r2, #0]
 80028ca:	4628      	mov	r0, r5
 80028cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028d0:	f000 b8d8 	b.w	8002a84 <__malloc_unlock>
 80028d4:	42a3      	cmp	r3, r4
 80028d6:	d908      	bls.n	80028ea <_free_r+0x42>
 80028d8:	6820      	ldr	r0, [r4, #0]
 80028da:	1821      	adds	r1, r4, r0
 80028dc:	428b      	cmp	r3, r1
 80028de:	bf01      	itttt	eq
 80028e0:	6819      	ldreq	r1, [r3, #0]
 80028e2:	685b      	ldreq	r3, [r3, #4]
 80028e4:	1809      	addeq	r1, r1, r0
 80028e6:	6021      	streq	r1, [r4, #0]
 80028e8:	e7ed      	b.n	80028c6 <_free_r+0x1e>
 80028ea:	461a      	mov	r2, r3
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	b10b      	cbz	r3, 80028f4 <_free_r+0x4c>
 80028f0:	42a3      	cmp	r3, r4
 80028f2:	d9fa      	bls.n	80028ea <_free_r+0x42>
 80028f4:	6811      	ldr	r1, [r2, #0]
 80028f6:	1850      	adds	r0, r2, r1
 80028f8:	42a0      	cmp	r0, r4
 80028fa:	d10b      	bne.n	8002914 <_free_r+0x6c>
 80028fc:	6820      	ldr	r0, [r4, #0]
 80028fe:	4401      	add	r1, r0
 8002900:	1850      	adds	r0, r2, r1
 8002902:	4283      	cmp	r3, r0
 8002904:	6011      	str	r1, [r2, #0]
 8002906:	d1e0      	bne.n	80028ca <_free_r+0x22>
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4408      	add	r0, r1
 800290e:	6010      	str	r0, [r2, #0]
 8002910:	6053      	str	r3, [r2, #4]
 8002912:	e7da      	b.n	80028ca <_free_r+0x22>
 8002914:	d902      	bls.n	800291c <_free_r+0x74>
 8002916:	230c      	movs	r3, #12
 8002918:	602b      	str	r3, [r5, #0]
 800291a:	e7d6      	b.n	80028ca <_free_r+0x22>
 800291c:	6820      	ldr	r0, [r4, #0]
 800291e:	1821      	adds	r1, r4, r0
 8002920:	428b      	cmp	r3, r1
 8002922:	bf01      	itttt	eq
 8002924:	6819      	ldreq	r1, [r3, #0]
 8002926:	685b      	ldreq	r3, [r3, #4]
 8002928:	1809      	addeq	r1, r1, r0
 800292a:	6021      	streq	r1, [r4, #0]
 800292c:	6063      	str	r3, [r4, #4]
 800292e:	6054      	str	r4, [r2, #4]
 8002930:	e7cb      	b.n	80028ca <_free_r+0x22>
 8002932:	bd38      	pop	{r3, r4, r5, pc}
 8002934:	20000350 	.word	0x20000350

08002938 <sbrk_aligned>:
 8002938:	b570      	push	{r4, r5, r6, lr}
 800293a:	4e0e      	ldr	r6, [pc, #56]	; (8002974 <sbrk_aligned+0x3c>)
 800293c:	460c      	mov	r4, r1
 800293e:	6831      	ldr	r1, [r6, #0]
 8002940:	4605      	mov	r5, r0
 8002942:	b911      	cbnz	r1, 800294a <sbrk_aligned+0x12>
 8002944:	f000 fbaa 	bl	800309c <_sbrk_r>
 8002948:	6030      	str	r0, [r6, #0]
 800294a:	4621      	mov	r1, r4
 800294c:	4628      	mov	r0, r5
 800294e:	f000 fba5 	bl	800309c <_sbrk_r>
 8002952:	1c43      	adds	r3, r0, #1
 8002954:	d00a      	beq.n	800296c <sbrk_aligned+0x34>
 8002956:	1cc4      	adds	r4, r0, #3
 8002958:	f024 0403 	bic.w	r4, r4, #3
 800295c:	42a0      	cmp	r0, r4
 800295e:	d007      	beq.n	8002970 <sbrk_aligned+0x38>
 8002960:	1a21      	subs	r1, r4, r0
 8002962:	4628      	mov	r0, r5
 8002964:	f000 fb9a 	bl	800309c <_sbrk_r>
 8002968:	3001      	adds	r0, #1
 800296a:	d101      	bne.n	8002970 <sbrk_aligned+0x38>
 800296c:	f04f 34ff 	mov.w	r4, #4294967295
 8002970:	4620      	mov	r0, r4
 8002972:	bd70      	pop	{r4, r5, r6, pc}
 8002974:	20000354 	.word	0x20000354

08002978 <_malloc_r>:
 8002978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800297c:	1ccd      	adds	r5, r1, #3
 800297e:	f025 0503 	bic.w	r5, r5, #3
 8002982:	3508      	adds	r5, #8
 8002984:	2d0c      	cmp	r5, #12
 8002986:	bf38      	it	cc
 8002988:	250c      	movcc	r5, #12
 800298a:	2d00      	cmp	r5, #0
 800298c:	4607      	mov	r7, r0
 800298e:	db01      	blt.n	8002994 <_malloc_r+0x1c>
 8002990:	42a9      	cmp	r1, r5
 8002992:	d905      	bls.n	80029a0 <_malloc_r+0x28>
 8002994:	230c      	movs	r3, #12
 8002996:	2600      	movs	r6, #0
 8002998:	603b      	str	r3, [r7, #0]
 800299a:	4630      	mov	r0, r6
 800299c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002a74 <_malloc_r+0xfc>
 80029a4:	f000 f868 	bl	8002a78 <__malloc_lock>
 80029a8:	f8d8 3000 	ldr.w	r3, [r8]
 80029ac:	461c      	mov	r4, r3
 80029ae:	bb5c      	cbnz	r4, 8002a08 <_malloc_r+0x90>
 80029b0:	4629      	mov	r1, r5
 80029b2:	4638      	mov	r0, r7
 80029b4:	f7ff ffc0 	bl	8002938 <sbrk_aligned>
 80029b8:	1c43      	adds	r3, r0, #1
 80029ba:	4604      	mov	r4, r0
 80029bc:	d155      	bne.n	8002a6a <_malloc_r+0xf2>
 80029be:	f8d8 4000 	ldr.w	r4, [r8]
 80029c2:	4626      	mov	r6, r4
 80029c4:	2e00      	cmp	r6, #0
 80029c6:	d145      	bne.n	8002a54 <_malloc_r+0xdc>
 80029c8:	2c00      	cmp	r4, #0
 80029ca:	d048      	beq.n	8002a5e <_malloc_r+0xe6>
 80029cc:	6823      	ldr	r3, [r4, #0]
 80029ce:	4631      	mov	r1, r6
 80029d0:	4638      	mov	r0, r7
 80029d2:	eb04 0903 	add.w	r9, r4, r3
 80029d6:	f000 fb61 	bl	800309c <_sbrk_r>
 80029da:	4581      	cmp	r9, r0
 80029dc:	d13f      	bne.n	8002a5e <_malloc_r+0xe6>
 80029de:	6821      	ldr	r1, [r4, #0]
 80029e0:	4638      	mov	r0, r7
 80029e2:	1a6d      	subs	r5, r5, r1
 80029e4:	4629      	mov	r1, r5
 80029e6:	f7ff ffa7 	bl	8002938 <sbrk_aligned>
 80029ea:	3001      	adds	r0, #1
 80029ec:	d037      	beq.n	8002a5e <_malloc_r+0xe6>
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	442b      	add	r3, r5
 80029f2:	6023      	str	r3, [r4, #0]
 80029f4:	f8d8 3000 	ldr.w	r3, [r8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d038      	beq.n	8002a6e <_malloc_r+0xf6>
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	42a2      	cmp	r2, r4
 8002a00:	d12b      	bne.n	8002a5a <_malloc_r+0xe2>
 8002a02:	2200      	movs	r2, #0
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	e00f      	b.n	8002a28 <_malloc_r+0xb0>
 8002a08:	6822      	ldr	r2, [r4, #0]
 8002a0a:	1b52      	subs	r2, r2, r5
 8002a0c:	d41f      	bmi.n	8002a4e <_malloc_r+0xd6>
 8002a0e:	2a0b      	cmp	r2, #11
 8002a10:	d917      	bls.n	8002a42 <_malloc_r+0xca>
 8002a12:	1961      	adds	r1, r4, r5
 8002a14:	42a3      	cmp	r3, r4
 8002a16:	6025      	str	r5, [r4, #0]
 8002a18:	bf18      	it	ne
 8002a1a:	6059      	strne	r1, [r3, #4]
 8002a1c:	6863      	ldr	r3, [r4, #4]
 8002a1e:	bf08      	it	eq
 8002a20:	f8c8 1000 	streq.w	r1, [r8]
 8002a24:	5162      	str	r2, [r4, r5]
 8002a26:	604b      	str	r3, [r1, #4]
 8002a28:	4638      	mov	r0, r7
 8002a2a:	f104 060b 	add.w	r6, r4, #11
 8002a2e:	f000 f829 	bl	8002a84 <__malloc_unlock>
 8002a32:	f026 0607 	bic.w	r6, r6, #7
 8002a36:	1d23      	adds	r3, r4, #4
 8002a38:	1af2      	subs	r2, r6, r3
 8002a3a:	d0ae      	beq.n	800299a <_malloc_r+0x22>
 8002a3c:	1b9b      	subs	r3, r3, r6
 8002a3e:	50a3      	str	r3, [r4, r2]
 8002a40:	e7ab      	b.n	800299a <_malloc_r+0x22>
 8002a42:	42a3      	cmp	r3, r4
 8002a44:	6862      	ldr	r2, [r4, #4]
 8002a46:	d1dd      	bne.n	8002a04 <_malloc_r+0x8c>
 8002a48:	f8c8 2000 	str.w	r2, [r8]
 8002a4c:	e7ec      	b.n	8002a28 <_malloc_r+0xb0>
 8002a4e:	4623      	mov	r3, r4
 8002a50:	6864      	ldr	r4, [r4, #4]
 8002a52:	e7ac      	b.n	80029ae <_malloc_r+0x36>
 8002a54:	4634      	mov	r4, r6
 8002a56:	6876      	ldr	r6, [r6, #4]
 8002a58:	e7b4      	b.n	80029c4 <_malloc_r+0x4c>
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	e7cc      	b.n	80029f8 <_malloc_r+0x80>
 8002a5e:	230c      	movs	r3, #12
 8002a60:	4638      	mov	r0, r7
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	f000 f80e 	bl	8002a84 <__malloc_unlock>
 8002a68:	e797      	b.n	800299a <_malloc_r+0x22>
 8002a6a:	6025      	str	r5, [r4, #0]
 8002a6c:	e7dc      	b.n	8002a28 <_malloc_r+0xb0>
 8002a6e:	605b      	str	r3, [r3, #4]
 8002a70:	deff      	udf	#255	; 0xff
 8002a72:	bf00      	nop
 8002a74:	20000350 	.word	0x20000350

08002a78 <__malloc_lock>:
 8002a78:	4801      	ldr	r0, [pc, #4]	; (8002a80 <__malloc_lock+0x8>)
 8002a7a:	f7ff bf13 	b.w	80028a4 <__retarget_lock_acquire_recursive>
 8002a7e:	bf00      	nop
 8002a80:	2000034c 	.word	0x2000034c

08002a84 <__malloc_unlock>:
 8002a84:	4801      	ldr	r0, [pc, #4]	; (8002a8c <__malloc_unlock+0x8>)
 8002a86:	f7ff bf0e 	b.w	80028a6 <__retarget_lock_release_recursive>
 8002a8a:	bf00      	nop
 8002a8c:	2000034c 	.word	0x2000034c

08002a90 <__ssputs_r>:
 8002a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a94:	461f      	mov	r7, r3
 8002a96:	688e      	ldr	r6, [r1, #8]
 8002a98:	4682      	mov	sl, r0
 8002a9a:	42be      	cmp	r6, r7
 8002a9c:	460c      	mov	r4, r1
 8002a9e:	4690      	mov	r8, r2
 8002aa0:	680b      	ldr	r3, [r1, #0]
 8002aa2:	d82c      	bhi.n	8002afe <__ssputs_r+0x6e>
 8002aa4:	898a      	ldrh	r2, [r1, #12]
 8002aa6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002aaa:	d026      	beq.n	8002afa <__ssputs_r+0x6a>
 8002aac:	6965      	ldr	r5, [r4, #20]
 8002aae:	6909      	ldr	r1, [r1, #16]
 8002ab0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ab4:	eba3 0901 	sub.w	r9, r3, r1
 8002ab8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002abc:	1c7b      	adds	r3, r7, #1
 8002abe:	444b      	add	r3, r9
 8002ac0:	106d      	asrs	r5, r5, #1
 8002ac2:	429d      	cmp	r5, r3
 8002ac4:	bf38      	it	cc
 8002ac6:	461d      	movcc	r5, r3
 8002ac8:	0553      	lsls	r3, r2, #21
 8002aca:	d527      	bpl.n	8002b1c <__ssputs_r+0x8c>
 8002acc:	4629      	mov	r1, r5
 8002ace:	f7ff ff53 	bl	8002978 <_malloc_r>
 8002ad2:	4606      	mov	r6, r0
 8002ad4:	b360      	cbz	r0, 8002b30 <__ssputs_r+0xa0>
 8002ad6:	464a      	mov	r2, r9
 8002ad8:	6921      	ldr	r1, [r4, #16]
 8002ada:	f000 fafd 	bl	80030d8 <memcpy>
 8002ade:	89a3      	ldrh	r3, [r4, #12]
 8002ae0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae8:	81a3      	strh	r3, [r4, #12]
 8002aea:	6126      	str	r6, [r4, #16]
 8002aec:	444e      	add	r6, r9
 8002aee:	6026      	str	r6, [r4, #0]
 8002af0:	463e      	mov	r6, r7
 8002af2:	6165      	str	r5, [r4, #20]
 8002af4:	eba5 0509 	sub.w	r5, r5, r9
 8002af8:	60a5      	str	r5, [r4, #8]
 8002afa:	42be      	cmp	r6, r7
 8002afc:	d900      	bls.n	8002b00 <__ssputs_r+0x70>
 8002afe:	463e      	mov	r6, r7
 8002b00:	4632      	mov	r2, r6
 8002b02:	4641      	mov	r1, r8
 8002b04:	6820      	ldr	r0, [r4, #0]
 8002b06:	f000 faaf 	bl	8003068 <memmove>
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	68a3      	ldr	r3, [r4, #8]
 8002b0e:	1b9b      	subs	r3, r3, r6
 8002b10:	60a3      	str	r3, [r4, #8]
 8002b12:	6823      	ldr	r3, [r4, #0]
 8002b14:	4433      	add	r3, r6
 8002b16:	6023      	str	r3, [r4, #0]
 8002b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b1c:	462a      	mov	r2, r5
 8002b1e:	f000 fae9 	bl	80030f4 <_realloc_r>
 8002b22:	4606      	mov	r6, r0
 8002b24:	2800      	cmp	r0, #0
 8002b26:	d1e0      	bne.n	8002aea <__ssputs_r+0x5a>
 8002b28:	4650      	mov	r0, sl
 8002b2a:	6921      	ldr	r1, [r4, #16]
 8002b2c:	f7ff febc 	bl	80028a8 <_free_r>
 8002b30:	230c      	movs	r3, #12
 8002b32:	f8ca 3000 	str.w	r3, [sl]
 8002b36:	89a3      	ldrh	r3, [r4, #12]
 8002b38:	f04f 30ff 	mov.w	r0, #4294967295
 8002b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b40:	81a3      	strh	r3, [r4, #12]
 8002b42:	e7e9      	b.n	8002b18 <__ssputs_r+0x88>

08002b44 <_svfiprintf_r>:
 8002b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b48:	4698      	mov	r8, r3
 8002b4a:	898b      	ldrh	r3, [r1, #12]
 8002b4c:	4607      	mov	r7, r0
 8002b4e:	061b      	lsls	r3, r3, #24
 8002b50:	460d      	mov	r5, r1
 8002b52:	4614      	mov	r4, r2
 8002b54:	b09d      	sub	sp, #116	; 0x74
 8002b56:	d50e      	bpl.n	8002b76 <_svfiprintf_r+0x32>
 8002b58:	690b      	ldr	r3, [r1, #16]
 8002b5a:	b963      	cbnz	r3, 8002b76 <_svfiprintf_r+0x32>
 8002b5c:	2140      	movs	r1, #64	; 0x40
 8002b5e:	f7ff ff0b 	bl	8002978 <_malloc_r>
 8002b62:	6028      	str	r0, [r5, #0]
 8002b64:	6128      	str	r0, [r5, #16]
 8002b66:	b920      	cbnz	r0, 8002b72 <_svfiprintf_r+0x2e>
 8002b68:	230c      	movs	r3, #12
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	e0d0      	b.n	8002d14 <_svfiprintf_r+0x1d0>
 8002b72:	2340      	movs	r3, #64	; 0x40
 8002b74:	616b      	str	r3, [r5, #20]
 8002b76:	2300      	movs	r3, #0
 8002b78:	9309      	str	r3, [sp, #36]	; 0x24
 8002b7a:	2320      	movs	r3, #32
 8002b7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b80:	2330      	movs	r3, #48	; 0x30
 8002b82:	f04f 0901 	mov.w	r9, #1
 8002b86:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b8a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002d2c <_svfiprintf_r+0x1e8>
 8002b8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b92:	4623      	mov	r3, r4
 8002b94:	469a      	mov	sl, r3
 8002b96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b9a:	b10a      	cbz	r2, 8002ba0 <_svfiprintf_r+0x5c>
 8002b9c:	2a25      	cmp	r2, #37	; 0x25
 8002b9e:	d1f9      	bne.n	8002b94 <_svfiprintf_r+0x50>
 8002ba0:	ebba 0b04 	subs.w	fp, sl, r4
 8002ba4:	d00b      	beq.n	8002bbe <_svfiprintf_r+0x7a>
 8002ba6:	465b      	mov	r3, fp
 8002ba8:	4622      	mov	r2, r4
 8002baa:	4629      	mov	r1, r5
 8002bac:	4638      	mov	r0, r7
 8002bae:	f7ff ff6f 	bl	8002a90 <__ssputs_r>
 8002bb2:	3001      	adds	r0, #1
 8002bb4:	f000 80a9 	beq.w	8002d0a <_svfiprintf_r+0x1c6>
 8002bb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002bba:	445a      	add	r2, fp
 8002bbc:	9209      	str	r2, [sp, #36]	; 0x24
 8002bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 80a1 	beq.w	8002d0a <_svfiprintf_r+0x1c6>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f04f 32ff 	mov.w	r2, #4294967295
 8002bce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002bd2:	f10a 0a01 	add.w	sl, sl, #1
 8002bd6:	9304      	str	r3, [sp, #16]
 8002bd8:	9307      	str	r3, [sp, #28]
 8002bda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002bde:	931a      	str	r3, [sp, #104]	; 0x68
 8002be0:	4654      	mov	r4, sl
 8002be2:	2205      	movs	r2, #5
 8002be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002be8:	4850      	ldr	r0, [pc, #320]	; (8002d2c <_svfiprintf_r+0x1e8>)
 8002bea:	f000 fa67 	bl	80030bc <memchr>
 8002bee:	9a04      	ldr	r2, [sp, #16]
 8002bf0:	b9d8      	cbnz	r0, 8002c2a <_svfiprintf_r+0xe6>
 8002bf2:	06d0      	lsls	r0, r2, #27
 8002bf4:	bf44      	itt	mi
 8002bf6:	2320      	movmi	r3, #32
 8002bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bfc:	0711      	lsls	r1, r2, #28
 8002bfe:	bf44      	itt	mi
 8002c00:	232b      	movmi	r3, #43	; 0x2b
 8002c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c06:	f89a 3000 	ldrb.w	r3, [sl]
 8002c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8002c0c:	d015      	beq.n	8002c3a <_svfiprintf_r+0xf6>
 8002c0e:	4654      	mov	r4, sl
 8002c10:	2000      	movs	r0, #0
 8002c12:	f04f 0c0a 	mov.w	ip, #10
 8002c16:	9a07      	ldr	r2, [sp, #28]
 8002c18:	4621      	mov	r1, r4
 8002c1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c1e:	3b30      	subs	r3, #48	; 0x30
 8002c20:	2b09      	cmp	r3, #9
 8002c22:	d94d      	bls.n	8002cc0 <_svfiprintf_r+0x17c>
 8002c24:	b1b0      	cbz	r0, 8002c54 <_svfiprintf_r+0x110>
 8002c26:	9207      	str	r2, [sp, #28]
 8002c28:	e014      	b.n	8002c54 <_svfiprintf_r+0x110>
 8002c2a:	eba0 0308 	sub.w	r3, r0, r8
 8002c2e:	fa09 f303 	lsl.w	r3, r9, r3
 8002c32:	4313      	orrs	r3, r2
 8002c34:	46a2      	mov	sl, r4
 8002c36:	9304      	str	r3, [sp, #16]
 8002c38:	e7d2      	b.n	8002be0 <_svfiprintf_r+0x9c>
 8002c3a:	9b03      	ldr	r3, [sp, #12]
 8002c3c:	1d19      	adds	r1, r3, #4
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	9103      	str	r1, [sp, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	bfbb      	ittet	lt
 8002c46:	425b      	neglt	r3, r3
 8002c48:	f042 0202 	orrlt.w	r2, r2, #2
 8002c4c:	9307      	strge	r3, [sp, #28]
 8002c4e:	9307      	strlt	r3, [sp, #28]
 8002c50:	bfb8      	it	lt
 8002c52:	9204      	strlt	r2, [sp, #16]
 8002c54:	7823      	ldrb	r3, [r4, #0]
 8002c56:	2b2e      	cmp	r3, #46	; 0x2e
 8002c58:	d10c      	bne.n	8002c74 <_svfiprintf_r+0x130>
 8002c5a:	7863      	ldrb	r3, [r4, #1]
 8002c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8002c5e:	d134      	bne.n	8002cca <_svfiprintf_r+0x186>
 8002c60:	9b03      	ldr	r3, [sp, #12]
 8002c62:	3402      	adds	r4, #2
 8002c64:	1d1a      	adds	r2, r3, #4
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	9203      	str	r2, [sp, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bfb8      	it	lt
 8002c6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c72:	9305      	str	r3, [sp, #20]
 8002c74:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002d30 <_svfiprintf_r+0x1ec>
 8002c78:	2203      	movs	r2, #3
 8002c7a:	4650      	mov	r0, sl
 8002c7c:	7821      	ldrb	r1, [r4, #0]
 8002c7e:	f000 fa1d 	bl	80030bc <memchr>
 8002c82:	b138      	cbz	r0, 8002c94 <_svfiprintf_r+0x150>
 8002c84:	2240      	movs	r2, #64	; 0x40
 8002c86:	9b04      	ldr	r3, [sp, #16]
 8002c88:	eba0 000a 	sub.w	r0, r0, sl
 8002c8c:	4082      	lsls	r2, r0
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	3401      	adds	r4, #1
 8002c92:	9304      	str	r3, [sp, #16]
 8002c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c98:	2206      	movs	r2, #6
 8002c9a:	4826      	ldr	r0, [pc, #152]	; (8002d34 <_svfiprintf_r+0x1f0>)
 8002c9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ca0:	f000 fa0c 	bl	80030bc <memchr>
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	d038      	beq.n	8002d1a <_svfiprintf_r+0x1d6>
 8002ca8:	4b23      	ldr	r3, [pc, #140]	; (8002d38 <_svfiprintf_r+0x1f4>)
 8002caa:	bb1b      	cbnz	r3, 8002cf4 <_svfiprintf_r+0x1b0>
 8002cac:	9b03      	ldr	r3, [sp, #12]
 8002cae:	3307      	adds	r3, #7
 8002cb0:	f023 0307 	bic.w	r3, r3, #7
 8002cb4:	3308      	adds	r3, #8
 8002cb6:	9303      	str	r3, [sp, #12]
 8002cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cba:	4433      	add	r3, r6
 8002cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8002cbe:	e768      	b.n	8002b92 <_svfiprintf_r+0x4e>
 8002cc0:	460c      	mov	r4, r1
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8002cc8:	e7a6      	b.n	8002c18 <_svfiprintf_r+0xd4>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f04f 0c0a 	mov.w	ip, #10
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	3401      	adds	r4, #1
 8002cd4:	9305      	str	r3, [sp, #20]
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002cdc:	3a30      	subs	r2, #48	; 0x30
 8002cde:	2a09      	cmp	r2, #9
 8002ce0:	d903      	bls.n	8002cea <_svfiprintf_r+0x1a6>
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0c6      	beq.n	8002c74 <_svfiprintf_r+0x130>
 8002ce6:	9105      	str	r1, [sp, #20]
 8002ce8:	e7c4      	b.n	8002c74 <_svfiprintf_r+0x130>
 8002cea:	4604      	mov	r4, r0
 8002cec:	2301      	movs	r3, #1
 8002cee:	fb0c 2101 	mla	r1, ip, r1, r2
 8002cf2:	e7f0      	b.n	8002cd6 <_svfiprintf_r+0x192>
 8002cf4:	ab03      	add	r3, sp, #12
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	462a      	mov	r2, r5
 8002cfa:	4638      	mov	r0, r7
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <_svfiprintf_r+0x1f8>)
 8002cfe:	a904      	add	r1, sp, #16
 8002d00:	f3af 8000 	nop.w
 8002d04:	1c42      	adds	r2, r0, #1
 8002d06:	4606      	mov	r6, r0
 8002d08:	d1d6      	bne.n	8002cb8 <_svfiprintf_r+0x174>
 8002d0a:	89ab      	ldrh	r3, [r5, #12]
 8002d0c:	065b      	lsls	r3, r3, #25
 8002d0e:	f53f af2d 	bmi.w	8002b6c <_svfiprintf_r+0x28>
 8002d12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d14:	b01d      	add	sp, #116	; 0x74
 8002d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d1a:	ab03      	add	r3, sp, #12
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	462a      	mov	r2, r5
 8002d20:	4638      	mov	r0, r7
 8002d22:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <_svfiprintf_r+0x1f8>)
 8002d24:	a904      	add	r1, sp, #16
 8002d26:	f000 f87d 	bl	8002e24 <_printf_i>
 8002d2a:	e7eb      	b.n	8002d04 <_svfiprintf_r+0x1c0>
 8002d2c:	080031c2 	.word	0x080031c2
 8002d30:	080031c8 	.word	0x080031c8
 8002d34:	080031cc 	.word	0x080031cc
 8002d38:	00000000 	.word	0x00000000
 8002d3c:	08002a91 	.word	0x08002a91

08002d40 <_printf_common>:
 8002d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d44:	4616      	mov	r6, r2
 8002d46:	4699      	mov	r9, r3
 8002d48:	688a      	ldr	r2, [r1, #8]
 8002d4a:	690b      	ldr	r3, [r1, #16]
 8002d4c:	4607      	mov	r7, r0
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	bfb8      	it	lt
 8002d52:	4613      	movlt	r3, r2
 8002d54:	6033      	str	r3, [r6, #0]
 8002d56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d5a:	460c      	mov	r4, r1
 8002d5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d60:	b10a      	cbz	r2, 8002d66 <_printf_common+0x26>
 8002d62:	3301      	adds	r3, #1
 8002d64:	6033      	str	r3, [r6, #0]
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	0699      	lsls	r1, r3, #26
 8002d6a:	bf42      	ittt	mi
 8002d6c:	6833      	ldrmi	r3, [r6, #0]
 8002d6e:	3302      	addmi	r3, #2
 8002d70:	6033      	strmi	r3, [r6, #0]
 8002d72:	6825      	ldr	r5, [r4, #0]
 8002d74:	f015 0506 	ands.w	r5, r5, #6
 8002d78:	d106      	bne.n	8002d88 <_printf_common+0x48>
 8002d7a:	f104 0a19 	add.w	sl, r4, #25
 8002d7e:	68e3      	ldr	r3, [r4, #12]
 8002d80:	6832      	ldr	r2, [r6, #0]
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	42ab      	cmp	r3, r5
 8002d86:	dc2b      	bgt.n	8002de0 <_printf_common+0xa0>
 8002d88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d8c:	1e13      	subs	r3, r2, #0
 8002d8e:	6822      	ldr	r2, [r4, #0]
 8002d90:	bf18      	it	ne
 8002d92:	2301      	movne	r3, #1
 8002d94:	0692      	lsls	r2, r2, #26
 8002d96:	d430      	bmi.n	8002dfa <_printf_common+0xba>
 8002d98:	4649      	mov	r1, r9
 8002d9a:	4638      	mov	r0, r7
 8002d9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002da0:	47c0      	blx	r8
 8002da2:	3001      	adds	r0, #1
 8002da4:	d023      	beq.n	8002dee <_printf_common+0xae>
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	6922      	ldr	r2, [r4, #16]
 8002daa:	f003 0306 	and.w	r3, r3, #6
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	bf14      	ite	ne
 8002db2:	2500      	movne	r5, #0
 8002db4:	6833      	ldreq	r3, [r6, #0]
 8002db6:	f04f 0600 	mov.w	r6, #0
 8002dba:	bf08      	it	eq
 8002dbc:	68e5      	ldreq	r5, [r4, #12]
 8002dbe:	f104 041a 	add.w	r4, r4, #26
 8002dc2:	bf08      	it	eq
 8002dc4:	1aed      	subeq	r5, r5, r3
 8002dc6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002dca:	bf08      	it	eq
 8002dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	bfc4      	itt	gt
 8002dd4:	1a9b      	subgt	r3, r3, r2
 8002dd6:	18ed      	addgt	r5, r5, r3
 8002dd8:	42b5      	cmp	r5, r6
 8002dda:	d11a      	bne.n	8002e12 <_printf_common+0xd2>
 8002ddc:	2000      	movs	r0, #0
 8002dde:	e008      	b.n	8002df2 <_printf_common+0xb2>
 8002de0:	2301      	movs	r3, #1
 8002de2:	4652      	mov	r2, sl
 8002de4:	4649      	mov	r1, r9
 8002de6:	4638      	mov	r0, r7
 8002de8:	47c0      	blx	r8
 8002dea:	3001      	adds	r0, #1
 8002dec:	d103      	bne.n	8002df6 <_printf_common+0xb6>
 8002dee:	f04f 30ff 	mov.w	r0, #4294967295
 8002df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002df6:	3501      	adds	r5, #1
 8002df8:	e7c1      	b.n	8002d7e <_printf_common+0x3e>
 8002dfa:	2030      	movs	r0, #48	; 0x30
 8002dfc:	18e1      	adds	r1, r4, r3
 8002dfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e08:	4422      	add	r2, r4
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e10:	e7c2      	b.n	8002d98 <_printf_common+0x58>
 8002e12:	2301      	movs	r3, #1
 8002e14:	4622      	mov	r2, r4
 8002e16:	4649      	mov	r1, r9
 8002e18:	4638      	mov	r0, r7
 8002e1a:	47c0      	blx	r8
 8002e1c:	3001      	adds	r0, #1
 8002e1e:	d0e6      	beq.n	8002dee <_printf_common+0xae>
 8002e20:	3601      	adds	r6, #1
 8002e22:	e7d9      	b.n	8002dd8 <_printf_common+0x98>

08002e24 <_printf_i>:
 8002e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e28:	7e0f      	ldrb	r7, [r1, #24]
 8002e2a:	4691      	mov	r9, r2
 8002e2c:	2f78      	cmp	r7, #120	; 0x78
 8002e2e:	4680      	mov	r8, r0
 8002e30:	460c      	mov	r4, r1
 8002e32:	469a      	mov	sl, r3
 8002e34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002e3a:	d807      	bhi.n	8002e4c <_printf_i+0x28>
 8002e3c:	2f62      	cmp	r7, #98	; 0x62
 8002e3e:	d80a      	bhi.n	8002e56 <_printf_i+0x32>
 8002e40:	2f00      	cmp	r7, #0
 8002e42:	f000 80d5 	beq.w	8002ff0 <_printf_i+0x1cc>
 8002e46:	2f58      	cmp	r7, #88	; 0x58
 8002e48:	f000 80c1 	beq.w	8002fce <_printf_i+0x1aa>
 8002e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e54:	e03a      	b.n	8002ecc <_printf_i+0xa8>
 8002e56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e5a:	2b15      	cmp	r3, #21
 8002e5c:	d8f6      	bhi.n	8002e4c <_printf_i+0x28>
 8002e5e:	a101      	add	r1, pc, #4	; (adr r1, 8002e64 <_printf_i+0x40>)
 8002e60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e64:	08002ebd 	.word	0x08002ebd
 8002e68:	08002ed1 	.word	0x08002ed1
 8002e6c:	08002e4d 	.word	0x08002e4d
 8002e70:	08002e4d 	.word	0x08002e4d
 8002e74:	08002e4d 	.word	0x08002e4d
 8002e78:	08002e4d 	.word	0x08002e4d
 8002e7c:	08002ed1 	.word	0x08002ed1
 8002e80:	08002e4d 	.word	0x08002e4d
 8002e84:	08002e4d 	.word	0x08002e4d
 8002e88:	08002e4d 	.word	0x08002e4d
 8002e8c:	08002e4d 	.word	0x08002e4d
 8002e90:	08002fd7 	.word	0x08002fd7
 8002e94:	08002efd 	.word	0x08002efd
 8002e98:	08002f91 	.word	0x08002f91
 8002e9c:	08002e4d 	.word	0x08002e4d
 8002ea0:	08002e4d 	.word	0x08002e4d
 8002ea4:	08002ff9 	.word	0x08002ff9
 8002ea8:	08002e4d 	.word	0x08002e4d
 8002eac:	08002efd 	.word	0x08002efd
 8002eb0:	08002e4d 	.word	0x08002e4d
 8002eb4:	08002e4d 	.word	0x08002e4d
 8002eb8:	08002f99 	.word	0x08002f99
 8002ebc:	682b      	ldr	r3, [r5, #0]
 8002ebe:	1d1a      	adds	r2, r3, #4
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	602a      	str	r2, [r5, #0]
 8002ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0a0      	b.n	8003012 <_printf_i+0x1ee>
 8002ed0:	6820      	ldr	r0, [r4, #0]
 8002ed2:	682b      	ldr	r3, [r5, #0]
 8002ed4:	0607      	lsls	r7, r0, #24
 8002ed6:	f103 0104 	add.w	r1, r3, #4
 8002eda:	6029      	str	r1, [r5, #0]
 8002edc:	d501      	bpl.n	8002ee2 <_printf_i+0xbe>
 8002ede:	681e      	ldr	r6, [r3, #0]
 8002ee0:	e003      	b.n	8002eea <_printf_i+0xc6>
 8002ee2:	0646      	lsls	r6, r0, #25
 8002ee4:	d5fb      	bpl.n	8002ede <_printf_i+0xba>
 8002ee6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002eea:	2e00      	cmp	r6, #0
 8002eec:	da03      	bge.n	8002ef6 <_printf_i+0xd2>
 8002eee:	232d      	movs	r3, #45	; 0x2d
 8002ef0:	4276      	negs	r6, r6
 8002ef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ef6:	230a      	movs	r3, #10
 8002ef8:	4859      	ldr	r0, [pc, #356]	; (8003060 <_printf_i+0x23c>)
 8002efa:	e012      	b.n	8002f22 <_printf_i+0xfe>
 8002efc:	682b      	ldr	r3, [r5, #0]
 8002efe:	6820      	ldr	r0, [r4, #0]
 8002f00:	1d19      	adds	r1, r3, #4
 8002f02:	6029      	str	r1, [r5, #0]
 8002f04:	0605      	lsls	r5, r0, #24
 8002f06:	d501      	bpl.n	8002f0c <_printf_i+0xe8>
 8002f08:	681e      	ldr	r6, [r3, #0]
 8002f0a:	e002      	b.n	8002f12 <_printf_i+0xee>
 8002f0c:	0641      	lsls	r1, r0, #25
 8002f0e:	d5fb      	bpl.n	8002f08 <_printf_i+0xe4>
 8002f10:	881e      	ldrh	r6, [r3, #0]
 8002f12:	2f6f      	cmp	r7, #111	; 0x6f
 8002f14:	bf0c      	ite	eq
 8002f16:	2308      	moveq	r3, #8
 8002f18:	230a      	movne	r3, #10
 8002f1a:	4851      	ldr	r0, [pc, #324]	; (8003060 <_printf_i+0x23c>)
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f22:	6865      	ldr	r5, [r4, #4]
 8002f24:	2d00      	cmp	r5, #0
 8002f26:	bfa8      	it	ge
 8002f28:	6821      	ldrge	r1, [r4, #0]
 8002f2a:	60a5      	str	r5, [r4, #8]
 8002f2c:	bfa4      	itt	ge
 8002f2e:	f021 0104 	bicge.w	r1, r1, #4
 8002f32:	6021      	strge	r1, [r4, #0]
 8002f34:	b90e      	cbnz	r6, 8002f3a <_printf_i+0x116>
 8002f36:	2d00      	cmp	r5, #0
 8002f38:	d04b      	beq.n	8002fd2 <_printf_i+0x1ae>
 8002f3a:	4615      	mov	r5, r2
 8002f3c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002f40:	fb03 6711 	mls	r7, r3, r1, r6
 8002f44:	5dc7      	ldrb	r7, [r0, r7]
 8002f46:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002f4a:	4637      	mov	r7, r6
 8002f4c:	42bb      	cmp	r3, r7
 8002f4e:	460e      	mov	r6, r1
 8002f50:	d9f4      	bls.n	8002f3c <_printf_i+0x118>
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d10b      	bne.n	8002f6e <_printf_i+0x14a>
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	07de      	lsls	r6, r3, #31
 8002f5a:	d508      	bpl.n	8002f6e <_printf_i+0x14a>
 8002f5c:	6923      	ldr	r3, [r4, #16]
 8002f5e:	6861      	ldr	r1, [r4, #4]
 8002f60:	4299      	cmp	r1, r3
 8002f62:	bfde      	ittt	le
 8002f64:	2330      	movle	r3, #48	; 0x30
 8002f66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002f6e:	1b52      	subs	r2, r2, r5
 8002f70:	6122      	str	r2, [r4, #16]
 8002f72:	464b      	mov	r3, r9
 8002f74:	4621      	mov	r1, r4
 8002f76:	4640      	mov	r0, r8
 8002f78:	f8cd a000 	str.w	sl, [sp]
 8002f7c:	aa03      	add	r2, sp, #12
 8002f7e:	f7ff fedf 	bl	8002d40 <_printf_common>
 8002f82:	3001      	adds	r0, #1
 8002f84:	d14a      	bne.n	800301c <_printf_i+0x1f8>
 8002f86:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8a:	b004      	add	sp, #16
 8002f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f90:	6823      	ldr	r3, [r4, #0]
 8002f92:	f043 0320 	orr.w	r3, r3, #32
 8002f96:	6023      	str	r3, [r4, #0]
 8002f98:	2778      	movs	r7, #120	; 0x78
 8002f9a:	4832      	ldr	r0, [pc, #200]	; (8003064 <_printf_i+0x240>)
 8002f9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002fa0:	6823      	ldr	r3, [r4, #0]
 8002fa2:	6829      	ldr	r1, [r5, #0]
 8002fa4:	061f      	lsls	r7, r3, #24
 8002fa6:	f851 6b04 	ldr.w	r6, [r1], #4
 8002faa:	d402      	bmi.n	8002fb2 <_printf_i+0x18e>
 8002fac:	065f      	lsls	r7, r3, #25
 8002fae:	bf48      	it	mi
 8002fb0:	b2b6      	uxthmi	r6, r6
 8002fb2:	07df      	lsls	r7, r3, #31
 8002fb4:	bf48      	it	mi
 8002fb6:	f043 0320 	orrmi.w	r3, r3, #32
 8002fba:	6029      	str	r1, [r5, #0]
 8002fbc:	bf48      	it	mi
 8002fbe:	6023      	strmi	r3, [r4, #0]
 8002fc0:	b91e      	cbnz	r6, 8002fca <_printf_i+0x1a6>
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	f023 0320 	bic.w	r3, r3, #32
 8002fc8:	6023      	str	r3, [r4, #0]
 8002fca:	2310      	movs	r3, #16
 8002fcc:	e7a6      	b.n	8002f1c <_printf_i+0xf8>
 8002fce:	4824      	ldr	r0, [pc, #144]	; (8003060 <_printf_i+0x23c>)
 8002fd0:	e7e4      	b.n	8002f9c <_printf_i+0x178>
 8002fd2:	4615      	mov	r5, r2
 8002fd4:	e7bd      	b.n	8002f52 <_printf_i+0x12e>
 8002fd6:	682b      	ldr	r3, [r5, #0]
 8002fd8:	6826      	ldr	r6, [r4, #0]
 8002fda:	1d18      	adds	r0, r3, #4
 8002fdc:	6961      	ldr	r1, [r4, #20]
 8002fde:	6028      	str	r0, [r5, #0]
 8002fe0:	0635      	lsls	r5, r6, #24
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	d501      	bpl.n	8002fea <_printf_i+0x1c6>
 8002fe6:	6019      	str	r1, [r3, #0]
 8002fe8:	e002      	b.n	8002ff0 <_printf_i+0x1cc>
 8002fea:	0670      	lsls	r0, r6, #25
 8002fec:	d5fb      	bpl.n	8002fe6 <_printf_i+0x1c2>
 8002fee:	8019      	strh	r1, [r3, #0]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	4615      	mov	r5, r2
 8002ff4:	6123      	str	r3, [r4, #16]
 8002ff6:	e7bc      	b.n	8002f72 <_printf_i+0x14e>
 8002ff8:	682b      	ldr	r3, [r5, #0]
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	1d1a      	adds	r2, r3, #4
 8002ffe:	602a      	str	r2, [r5, #0]
 8003000:	681d      	ldr	r5, [r3, #0]
 8003002:	6862      	ldr	r2, [r4, #4]
 8003004:	4628      	mov	r0, r5
 8003006:	f000 f859 	bl	80030bc <memchr>
 800300a:	b108      	cbz	r0, 8003010 <_printf_i+0x1ec>
 800300c:	1b40      	subs	r0, r0, r5
 800300e:	6060      	str	r0, [r4, #4]
 8003010:	6863      	ldr	r3, [r4, #4]
 8003012:	6123      	str	r3, [r4, #16]
 8003014:	2300      	movs	r3, #0
 8003016:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800301a:	e7aa      	b.n	8002f72 <_printf_i+0x14e>
 800301c:	462a      	mov	r2, r5
 800301e:	4649      	mov	r1, r9
 8003020:	4640      	mov	r0, r8
 8003022:	6923      	ldr	r3, [r4, #16]
 8003024:	47d0      	blx	sl
 8003026:	3001      	adds	r0, #1
 8003028:	d0ad      	beq.n	8002f86 <_printf_i+0x162>
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	079b      	lsls	r3, r3, #30
 800302e:	d413      	bmi.n	8003058 <_printf_i+0x234>
 8003030:	68e0      	ldr	r0, [r4, #12]
 8003032:	9b03      	ldr	r3, [sp, #12]
 8003034:	4298      	cmp	r0, r3
 8003036:	bfb8      	it	lt
 8003038:	4618      	movlt	r0, r3
 800303a:	e7a6      	b.n	8002f8a <_printf_i+0x166>
 800303c:	2301      	movs	r3, #1
 800303e:	4632      	mov	r2, r6
 8003040:	4649      	mov	r1, r9
 8003042:	4640      	mov	r0, r8
 8003044:	47d0      	blx	sl
 8003046:	3001      	adds	r0, #1
 8003048:	d09d      	beq.n	8002f86 <_printf_i+0x162>
 800304a:	3501      	adds	r5, #1
 800304c:	68e3      	ldr	r3, [r4, #12]
 800304e:	9903      	ldr	r1, [sp, #12]
 8003050:	1a5b      	subs	r3, r3, r1
 8003052:	42ab      	cmp	r3, r5
 8003054:	dcf2      	bgt.n	800303c <_printf_i+0x218>
 8003056:	e7eb      	b.n	8003030 <_printf_i+0x20c>
 8003058:	2500      	movs	r5, #0
 800305a:	f104 0619 	add.w	r6, r4, #25
 800305e:	e7f5      	b.n	800304c <_printf_i+0x228>
 8003060:	080031d3 	.word	0x080031d3
 8003064:	080031e4 	.word	0x080031e4

08003068 <memmove>:
 8003068:	4288      	cmp	r0, r1
 800306a:	b510      	push	{r4, lr}
 800306c:	eb01 0402 	add.w	r4, r1, r2
 8003070:	d902      	bls.n	8003078 <memmove+0x10>
 8003072:	4284      	cmp	r4, r0
 8003074:	4623      	mov	r3, r4
 8003076:	d807      	bhi.n	8003088 <memmove+0x20>
 8003078:	1e43      	subs	r3, r0, #1
 800307a:	42a1      	cmp	r1, r4
 800307c:	d008      	beq.n	8003090 <memmove+0x28>
 800307e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003082:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003086:	e7f8      	b.n	800307a <memmove+0x12>
 8003088:	4601      	mov	r1, r0
 800308a:	4402      	add	r2, r0
 800308c:	428a      	cmp	r2, r1
 800308e:	d100      	bne.n	8003092 <memmove+0x2a>
 8003090:	bd10      	pop	{r4, pc}
 8003092:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003096:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800309a:	e7f7      	b.n	800308c <memmove+0x24>

0800309c <_sbrk_r>:
 800309c:	b538      	push	{r3, r4, r5, lr}
 800309e:	2300      	movs	r3, #0
 80030a0:	4d05      	ldr	r5, [pc, #20]	; (80030b8 <_sbrk_r+0x1c>)
 80030a2:	4604      	mov	r4, r0
 80030a4:	4608      	mov	r0, r1
 80030a6:	602b      	str	r3, [r5, #0]
 80030a8:	f7fd ffac 	bl	8001004 <_sbrk>
 80030ac:	1c43      	adds	r3, r0, #1
 80030ae:	d102      	bne.n	80030b6 <_sbrk_r+0x1a>
 80030b0:	682b      	ldr	r3, [r5, #0]
 80030b2:	b103      	cbz	r3, 80030b6 <_sbrk_r+0x1a>
 80030b4:	6023      	str	r3, [r4, #0]
 80030b6:	bd38      	pop	{r3, r4, r5, pc}
 80030b8:	20000348 	.word	0x20000348

080030bc <memchr>:
 80030bc:	4603      	mov	r3, r0
 80030be:	b510      	push	{r4, lr}
 80030c0:	b2c9      	uxtb	r1, r1
 80030c2:	4402      	add	r2, r0
 80030c4:	4293      	cmp	r3, r2
 80030c6:	4618      	mov	r0, r3
 80030c8:	d101      	bne.n	80030ce <memchr+0x12>
 80030ca:	2000      	movs	r0, #0
 80030cc:	e003      	b.n	80030d6 <memchr+0x1a>
 80030ce:	7804      	ldrb	r4, [r0, #0]
 80030d0:	3301      	adds	r3, #1
 80030d2:	428c      	cmp	r4, r1
 80030d4:	d1f6      	bne.n	80030c4 <memchr+0x8>
 80030d6:	bd10      	pop	{r4, pc}

080030d8 <memcpy>:
 80030d8:	440a      	add	r2, r1
 80030da:	4291      	cmp	r1, r2
 80030dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80030e0:	d100      	bne.n	80030e4 <memcpy+0xc>
 80030e2:	4770      	bx	lr
 80030e4:	b510      	push	{r4, lr}
 80030e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030ea:	4291      	cmp	r1, r2
 80030ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030f0:	d1f9      	bne.n	80030e6 <memcpy+0xe>
 80030f2:	bd10      	pop	{r4, pc}

080030f4 <_realloc_r>:
 80030f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030f8:	4680      	mov	r8, r0
 80030fa:	4614      	mov	r4, r2
 80030fc:	460e      	mov	r6, r1
 80030fe:	b921      	cbnz	r1, 800310a <_realloc_r+0x16>
 8003100:	4611      	mov	r1, r2
 8003102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003106:	f7ff bc37 	b.w	8002978 <_malloc_r>
 800310a:	b92a      	cbnz	r2, 8003118 <_realloc_r+0x24>
 800310c:	f7ff fbcc 	bl	80028a8 <_free_r>
 8003110:	4625      	mov	r5, r4
 8003112:	4628      	mov	r0, r5
 8003114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003118:	f000 f81b 	bl	8003152 <_malloc_usable_size_r>
 800311c:	4284      	cmp	r4, r0
 800311e:	4607      	mov	r7, r0
 8003120:	d802      	bhi.n	8003128 <_realloc_r+0x34>
 8003122:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003126:	d812      	bhi.n	800314e <_realloc_r+0x5a>
 8003128:	4621      	mov	r1, r4
 800312a:	4640      	mov	r0, r8
 800312c:	f7ff fc24 	bl	8002978 <_malloc_r>
 8003130:	4605      	mov	r5, r0
 8003132:	2800      	cmp	r0, #0
 8003134:	d0ed      	beq.n	8003112 <_realloc_r+0x1e>
 8003136:	42bc      	cmp	r4, r7
 8003138:	4622      	mov	r2, r4
 800313a:	4631      	mov	r1, r6
 800313c:	bf28      	it	cs
 800313e:	463a      	movcs	r2, r7
 8003140:	f7ff ffca 	bl	80030d8 <memcpy>
 8003144:	4631      	mov	r1, r6
 8003146:	4640      	mov	r0, r8
 8003148:	f7ff fbae 	bl	80028a8 <_free_r>
 800314c:	e7e1      	b.n	8003112 <_realloc_r+0x1e>
 800314e:	4635      	mov	r5, r6
 8003150:	e7df      	b.n	8003112 <_realloc_r+0x1e>

08003152 <_malloc_usable_size_r>:
 8003152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003156:	1f18      	subs	r0, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	bfbc      	itt	lt
 800315c:	580b      	ldrlt	r3, [r1, r0]
 800315e:	18c0      	addlt	r0, r0, r3
 8003160:	4770      	bx	lr
	...

08003164 <_init>:
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003166:	bf00      	nop
 8003168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316a:	bc08      	pop	{r3}
 800316c:	469e      	mov	lr, r3
 800316e:	4770      	bx	lr

08003170 <_fini>:
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003172:	bf00      	nop
 8003174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003176:	bc08      	pop	{r3}
 8003178:	469e      	mov	lr, r3
 800317a:	4770      	bx	lr
